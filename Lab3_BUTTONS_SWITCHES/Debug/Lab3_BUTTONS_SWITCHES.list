
Lab3_BUTTONS_SWITCHES.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b9c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ca8  08002ca8  00012ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc8  08002cc8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08002cc8  08002cc8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002cc8  08002cc8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00012cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00012ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08002cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  2000006c  08002d3c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000124  08002d3c  00020124  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009d4f  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cda  00000000  00000000  00029de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002bac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170e3  00000000  00000000  0002cea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e574  00000000  00000000  00043f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000824f7  00000000  00000000  000524f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d49ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a8  00000000  00000000  000d4a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c90 	.word	0x08002c90

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	08002c90 	.word	0x08002c90

0800014c <subKeyProcess>:
int isButtonPressed = 0;
int button1_flag=0;
int button2_flag=0;
int button3_flag=0;

void subKeyProcess(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(KeyReg3 == PRESSED_STATE){
 8000150:	4b0c      	ldr	r3, [pc, #48]	; (8000184 <subKeyProcess+0x38>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b00      	cmp	r3, #0
 8000156:	d102      	bne.n	800015e <subKeyProcess+0x12>
		//isButtonPressed =1;
		button1_flag=1;
 8000158:	4b0b      	ldr	r3, [pc, #44]	; (8000188 <subKeyProcess+0x3c>)
 800015a:	2201      	movs	r2, #1
 800015c:	601a      	str	r2, [r3, #0]
	}
	if(KeyReg31 == PRESSED_STATE){
 800015e:	4b0b      	ldr	r3, [pc, #44]	; (800018c <subKeyProcess+0x40>)
 8000160:	681b      	ldr	r3, [r3, #0]
 8000162:	2b00      	cmp	r3, #0
 8000164:	d102      	bne.n	800016c <subKeyProcess+0x20>
		//isButtonPressed =1;
		button2_flag=1;
 8000166:	4b0a      	ldr	r3, [pc, #40]	; (8000190 <subKeyProcess+0x44>)
 8000168:	2201      	movs	r2, #1
 800016a:	601a      	str	r2, [r3, #0]
	}

	if(KeyReg32 == PRESSED_STATE){
 800016c:	4b09      	ldr	r3, [pc, #36]	; (8000194 <subKeyProcess+0x48>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	2b00      	cmp	r3, #0
 8000172:	d102      	bne.n	800017a <subKeyProcess+0x2e>
		//isButtonPressed =1;
		button3_flag=1;
 8000174:	4b08      	ldr	r3, [pc, #32]	; (8000198 <subKeyProcess+0x4c>)
 8000176:	2201      	movs	r2, #1
 8000178:	601a      	str	r2, [r3, #0]
	}

}
 800017a:	bf00      	nop
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	2000000c 	.word	0x2000000c
 8000188:	20000088 	.word	0x20000088
 800018c:	2000001c 	.word	0x2000001c
 8000190:	2000008c 	.word	0x2000008c
 8000194:	2000002c 	.word	0x2000002c
 8000198:	20000090 	.word	0x20000090

0800019c <getKeyInput>:
void getKeyInput(){
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 80001a0:	4b1f      	ldr	r3, [pc, #124]	; (8000220 <getKeyInput+0x84>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a1f      	ldr	r2, [pc, #124]	; (8000224 <getKeyInput+0x88>)
 80001a6:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 80001a8:	4b1f      	ldr	r3, [pc, #124]	; (8000228 <getKeyInput+0x8c>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a1c      	ldr	r2, [pc, #112]	; (8000220 <getKeyInput+0x84>)
 80001ae:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(SELECT_MODE_BUTTON_GPIO_Port,SELECT_MODE_BUTTON_Pin);
 80001b0:	2102      	movs	r1, #2
 80001b2:	481e      	ldr	r0, [pc, #120]	; (800022c <getKeyInput+0x90>)
 80001b4:	f001 fd44 	bl	8001c40 <HAL_GPIO_ReadPin>
 80001b8:	4603      	mov	r3, r0
 80001ba:	461a      	mov	r2, r3
 80001bc:	4b1a      	ldr	r3, [pc, #104]	; (8000228 <getKeyInput+0x8c>)
 80001be:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 80001c0:	4b17      	ldr	r3, [pc, #92]	; (8000220 <getKeyInput+0x84>)
 80001c2:	681a      	ldr	r2, [r3, #0]
 80001c4:	4b18      	ldr	r3, [pc, #96]	; (8000228 <getKeyInput+0x8c>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	429a      	cmp	r2, r3
 80001ca:	d126      	bne.n	800021a <getKeyInput+0x7e>
 80001cc:	4b14      	ldr	r3, [pc, #80]	; (8000220 <getKeyInput+0x84>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b14      	ldr	r3, [pc, #80]	; (8000224 <getKeyInput+0x88>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	429a      	cmp	r2, r3
 80001d6:	d120      	bne.n	800021a <getKeyInput+0x7e>
    if (KeyReg2 != KeyReg3){
 80001d8:	4b12      	ldr	r3, [pc, #72]	; (8000224 <getKeyInput+0x88>)
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <getKeyInput+0x94>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	429a      	cmp	r2, r3
 80001e2:	d00e      	beq.n	8000202 <getKeyInput+0x66>
      KeyReg3 = KeyReg2;
 80001e4:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <getKeyInput+0x88>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a11      	ldr	r2, [pc, #68]	; (8000230 <getKeyInput+0x94>)
 80001ea:	6013      	str	r3, [r2, #0]

      if (KeyReg3 == PRESSED_STATE){
 80001ec:	4b10      	ldr	r3, [pc, #64]	; (8000230 <getKeyInput+0x94>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d112      	bne.n	800021a <getKeyInput+0x7e>
        TimeOutForKeyPress = TIMEOUT;
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <getKeyInput+0x98>)
 80001f6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80001fa:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 80001fc:	f7ff ffa6 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg3 = NORMAL_STATE;
        }
    }
  }
}
 8000200:	e00b      	b.n	800021a <getKeyInput+0x7e>
       TimeOutForKeyPress --;
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <getKeyInput+0x98>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	3b01      	subs	r3, #1
 8000208:	4a0a      	ldr	r2, [pc, #40]	; (8000234 <getKeyInput+0x98>)
 800020a:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 800020c:	4b09      	ldr	r3, [pc, #36]	; (8000234 <getKeyInput+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d102      	bne.n	800021a <getKeyInput+0x7e>
          KeyReg3 = NORMAL_STATE;
 8000214:	4b06      	ldr	r3, [pc, #24]	; (8000230 <getKeyInput+0x94>)
 8000216:	2201      	movs	r2, #1
 8000218:	601a      	str	r2, [r3, #0]
}
 800021a:	bf00      	nop
 800021c:	bd80      	pop	{r7, pc}
 800021e:	bf00      	nop
 8000220:	20000004 	.word	0x20000004
 8000224:	20000008 	.word	0x20000008
 8000228:	20000000 	.word	0x20000000
 800022c:	40010800 	.word	0x40010800
 8000230:	2000000c 	.word	0x2000000c
 8000234:	20000030 	.word	0x20000030

08000238 <getKeyInput1>:

void getKeyInput1(){
 8000238:	b580      	push	{r7, lr}
 800023a:	af00      	add	r7, sp, #0
  KeyReg21 = KeyReg11;
 800023c:	4b1f      	ldr	r3, [pc, #124]	; (80002bc <getKeyInput1+0x84>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a1f      	ldr	r2, [pc, #124]	; (80002c0 <getKeyInput1+0x88>)
 8000242:	6013      	str	r3, [r2, #0]
  KeyReg11 = KeyReg01;
 8000244:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <getKeyInput1+0x8c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <getKeyInput1+0x84>)
 800024a:	6013      	str	r3, [r2, #0]
  KeyReg01= HAL_GPIO_ReadPin(MODIFY_BUTTOON_GPIO_Port, MODIFY_BUTTOON_Pin);
 800024c:	2104      	movs	r1, #4
 800024e:	481e      	ldr	r0, [pc, #120]	; (80002c8 <getKeyInput1+0x90>)
 8000250:	f001 fcf6 	bl	8001c40 <HAL_GPIO_ReadPin>
 8000254:	4603      	mov	r3, r0
 8000256:	461a      	mov	r2, r3
 8000258:	4b1a      	ldr	r3, [pc, #104]	; (80002c4 <getKeyInput1+0x8c>)
 800025a:	601a      	str	r2, [r3, #0]
  if ((KeyReg11 == KeyReg01) && (KeyReg11 == KeyReg21)){
 800025c:	4b17      	ldr	r3, [pc, #92]	; (80002bc <getKeyInput1+0x84>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b18      	ldr	r3, [pc, #96]	; (80002c4 <getKeyInput1+0x8c>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	429a      	cmp	r2, r3
 8000266:	d126      	bne.n	80002b6 <getKeyInput1+0x7e>
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <getKeyInput1+0x84>)
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	4b14      	ldr	r3, [pc, #80]	; (80002c0 <getKeyInput1+0x88>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	429a      	cmp	r2, r3
 8000272:	d120      	bne.n	80002b6 <getKeyInput1+0x7e>
    if (KeyReg21 != KeyReg31){
 8000274:	4b12      	ldr	r3, [pc, #72]	; (80002c0 <getKeyInput1+0x88>)
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	4b14      	ldr	r3, [pc, #80]	; (80002cc <getKeyInput1+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	429a      	cmp	r2, r3
 800027e:	d00e      	beq.n	800029e <getKeyInput1+0x66>
      KeyReg31 = KeyReg21;
 8000280:	4b0f      	ldr	r3, [pc, #60]	; (80002c0 <getKeyInput1+0x88>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a11      	ldr	r2, [pc, #68]	; (80002cc <getKeyInput1+0x94>)
 8000286:	6013      	str	r3, [r2, #0]

      if (KeyReg31 == PRESSED_STATE){
 8000288:	4b10      	ldr	r3, [pc, #64]	; (80002cc <getKeyInput1+0x94>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d112      	bne.n	80002b6 <getKeyInput1+0x7e>
        TimeOutForKeyPress = TIMEOUT;
 8000290:	4b0f      	ldr	r3, [pc, #60]	; (80002d0 <getKeyInput1+0x98>)
 8000292:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000296:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 8000298:	f7ff ff58 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg31 = NORMAL_STATE;
        }
    }
  }
}
 800029c:	e00b      	b.n	80002b6 <getKeyInput1+0x7e>
       TimeOutForKeyPress --;
 800029e:	4b0c      	ldr	r3, [pc, #48]	; (80002d0 <getKeyInput1+0x98>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	3b01      	subs	r3, #1
 80002a4:	4a0a      	ldr	r2, [pc, #40]	; (80002d0 <getKeyInput1+0x98>)
 80002a6:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80002a8:	4b09      	ldr	r3, [pc, #36]	; (80002d0 <getKeyInput1+0x98>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d102      	bne.n	80002b6 <getKeyInput1+0x7e>
          KeyReg31 = NORMAL_STATE;
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <getKeyInput1+0x94>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000014 	.word	0x20000014
 80002c0:	20000018 	.word	0x20000018
 80002c4:	20000010 	.word	0x20000010
 80002c8:	40010800 	.word	0x40010800
 80002cc:	2000001c 	.word	0x2000001c
 80002d0:	20000030 	.word	0x20000030

080002d4 <getKeyInput2>:

void getKeyInput2(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
  KeyReg22 = KeyReg12;
 80002d8:	4b1f      	ldr	r3, [pc, #124]	; (8000358 <getKeyInput2+0x84>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a1f      	ldr	r2, [pc, #124]	; (800035c <getKeyInput2+0x88>)
 80002de:	6013      	str	r3, [r2, #0]
  KeyReg12 = KeyReg02;
 80002e0:	4b1f      	ldr	r3, [pc, #124]	; (8000360 <getKeyInput2+0x8c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a1c      	ldr	r2, [pc, #112]	; (8000358 <getKeyInput2+0x84>)
 80002e6:	6013      	str	r3, [r2, #0]
  KeyReg02= HAL_GPIO_ReadPin(SET_VALUE_BUTTON_GPIO_Port, SET_VALUE_BUTTON_Pin);
 80002e8:	2108      	movs	r1, #8
 80002ea:	481e      	ldr	r0, [pc, #120]	; (8000364 <getKeyInput2+0x90>)
 80002ec:	f001 fca8 	bl	8001c40 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	461a      	mov	r2, r3
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <getKeyInput2+0x8c>)
 80002f6:	601a      	str	r2, [r3, #0]
  if ((KeyReg12 == KeyReg02) && (KeyReg12 == KeyReg22)){
 80002f8:	4b17      	ldr	r3, [pc, #92]	; (8000358 <getKeyInput2+0x84>)
 80002fa:	681a      	ldr	r2, [r3, #0]
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <getKeyInput2+0x8c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	429a      	cmp	r2, r3
 8000302:	d126      	bne.n	8000352 <getKeyInput2+0x7e>
 8000304:	4b14      	ldr	r3, [pc, #80]	; (8000358 <getKeyInput2+0x84>)
 8000306:	681a      	ldr	r2, [r3, #0]
 8000308:	4b14      	ldr	r3, [pc, #80]	; (800035c <getKeyInput2+0x88>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	429a      	cmp	r2, r3
 800030e:	d120      	bne.n	8000352 <getKeyInput2+0x7e>
    if (KeyReg22 != KeyReg32){
 8000310:	4b12      	ldr	r3, [pc, #72]	; (800035c <getKeyInput2+0x88>)
 8000312:	681a      	ldr	r2, [r3, #0]
 8000314:	4b14      	ldr	r3, [pc, #80]	; (8000368 <getKeyInput2+0x94>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	d00e      	beq.n	800033a <getKeyInput2+0x66>
      KeyReg32 = KeyReg22;
 800031c:	4b0f      	ldr	r3, [pc, #60]	; (800035c <getKeyInput2+0x88>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a11      	ldr	r2, [pc, #68]	; (8000368 <getKeyInput2+0x94>)
 8000322:	6013      	str	r3, [r2, #0]

      if (KeyReg32 == PRESSED_STATE){
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <getKeyInput2+0x94>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d112      	bne.n	8000352 <getKeyInput2+0x7e>
        TimeOutForKeyPress = TIMEOUT;
 800032c:	4b0f      	ldr	r3, [pc, #60]	; (800036c <getKeyInput2+0x98>)
 800032e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000332:	601a      	str	r2, [r3, #0]
        subKeyProcess();
 8000334:	f7ff ff0a 	bl	800014c <subKeyProcess>
        if (TimeOutForKeyPress == 0){
          KeyReg32 = NORMAL_STATE;
        }
    }
  }
}
 8000338:	e00b      	b.n	8000352 <getKeyInput2+0x7e>
       TimeOutForKeyPress --;
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <getKeyInput2+0x98>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	3b01      	subs	r3, #1
 8000340:	4a0a      	ldr	r2, [pc, #40]	; (800036c <getKeyInput2+0x98>)
 8000342:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000344:	4b09      	ldr	r3, [pc, #36]	; (800036c <getKeyInput2+0x98>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	2b00      	cmp	r3, #0
 800034a:	d102      	bne.n	8000352 <getKeyInput2+0x7e>
          KeyReg32 = NORMAL_STATE;
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <getKeyInput2+0x94>)
 800034e:	2201      	movs	r2, #1
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000024 	.word	0x20000024
 800035c:	20000028 	.word	0x20000028
 8000360:	20000020 	.word	0x20000020
 8000364:	40010800 	.word	0x40010800
 8000368:	2000002c 	.word	0x2000002c
 800036c:	20000030 	.word	0x20000030

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000374:	f001 f97a 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f816 	bl	80003a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f89c 	bl	80004b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000380:	f000 f84e 	bl	8000420 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000384:	4807      	ldr	r0, [pc, #28]	; (80003a4 <main+0x34>)
 8000386:	f002 f8c3 	bl	8002510 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(50);
 800038a:	2032      	movs	r0, #50	; 0x32
 800038c:	f000 ff68 	bl	8001260 <setTimer1>
  setTimer2(100); // Timer for count down
 8000390:	2064      	movs	r0, #100	; 0x64
 8000392:	f000 ff79 	bl	8001288 <setTimer2>
  setTimer3(TIMER_INTERRUPT_DURATION); // scan led timer
 8000396:	2014      	movs	r0, #20
 8000398:	f000 ff8a 	bl	80012b0 <setTimer3>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  selecting_mode_run();
 800039c:	f000 fa6c 	bl	8000878 <selecting_mode_run>
 80003a0:	e7fc      	b.n	800039c <main+0x2c>
 80003a2:	bf00      	nop
 80003a4:	200000d8 	.word	0x200000d8

080003a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b090      	sub	sp, #64	; 0x40
 80003ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ae:	f107 0318 	add.w	r3, r7, #24
 80003b2:	2228      	movs	r2, #40	; 0x28
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f002 fc62 	bl	8002c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003bc:	1d3b      	adds	r3, r7, #4
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
 80003c8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ce:	2301      	movs	r3, #1
 80003d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003d2:	2310      	movs	r3, #16
 80003d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003d6:	2300      	movs	r3, #0
 80003d8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003da:	f107 0318 	add.w	r3, r7, #24
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fc5e 	bl	8001ca0 <HAL_RCC_OscConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x46>
  {
    Error_Handler();
 80003ea:	f000 f8d5 	bl	8000598 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ee:	230f      	movs	r3, #15
 80003f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003f2:	2300      	movs	r3, #0
 80003f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003fe:	2300      	movs	r3, #0
 8000400:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000402:	1d3b      	adds	r3, r7, #4
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f001 feca 	bl	80021a0 <HAL_RCC_ClockConfig>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000412:	f000 f8c1 	bl	8000598 <Error_Handler>
  }
}
 8000416:	bf00      	nop
 8000418:	3740      	adds	r7, #64	; 0x40
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
 8000432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000434:	463b      	mov	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	601a      	str	r2, [r3, #0]
 800043a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800043c:	4b1d      	ldr	r3, [pc, #116]	; (80004b4 <MX_TIM2_Init+0x94>)
 800043e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000442:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000446:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800044a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800044c:	4b19      	ldr	r3, [pc, #100]	; (80004b4 <MX_TIM2_Init+0x94>)
 800044e:	2200      	movs	r2, #0
 8000450:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000452:	4b18      	ldr	r3, [pc, #96]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000454:	2209      	movs	r2, #9
 8000456:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000458:	4b16      	ldr	r3, [pc, #88]	; (80004b4 <MX_TIM2_Init+0x94>)
 800045a:	2200      	movs	r2, #0
 800045c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000460:	2200      	movs	r2, #0
 8000462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000464:	4813      	ldr	r0, [pc, #76]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000466:	f002 f803 	bl	8002470 <HAL_TIM_Base_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000470:	f000 f892 	bl	8000598 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000478:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800047a:	f107 0308 	add.w	r3, r7, #8
 800047e:	4619      	mov	r1, r3
 8000480:	480c      	ldr	r0, [pc, #48]	; (80004b4 <MX_TIM2_Init+0x94>)
 8000482:	f002 f999 	bl	80027b8 <HAL_TIM_ConfigClockSource>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800048c:	f000 f884 	bl	8000598 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000494:	2300      	movs	r3, #0
 8000496:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000498:	463b      	mov	r3, r7
 800049a:	4619      	mov	r1, r3
 800049c:	4805      	ldr	r0, [pc, #20]	; (80004b4 <MX_TIM2_Init+0x94>)
 800049e:	f002 fb61 	bl	8002b64 <HAL_TIMEx_MasterConfigSynchronization>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f000 f876 	bl	8000598 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80004ac:	bf00      	nop
 80004ae:	3718      	adds	r7, #24
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	200000d8 	.word	0x200000d8

080004b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004cc:	4b27      	ldr	r3, [pc, #156]	; (800056c <MX_GPIO_Init+0xb4>)
 80004ce:	699b      	ldr	r3, [r3, #24]
 80004d0:	4a26      	ldr	r2, [pc, #152]	; (800056c <MX_GPIO_Init+0xb4>)
 80004d2:	f043 0304 	orr.w	r3, r3, #4
 80004d6:	6193      	str	r3, [r2, #24]
 80004d8:	4b24      	ldr	r3, [pc, #144]	; (800056c <MX_GPIO_Init+0xb4>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	f003 0304 	and.w	r3, r3, #4
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004e4:	4b21      	ldr	r3, [pc, #132]	; (800056c <MX_GPIO_Init+0xb4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	4a20      	ldr	r2, [pc, #128]	; (800056c <MX_GPIO_Init+0xb4>)
 80004ea:	f043 0308 	orr.w	r3, r3, #8
 80004ee:	6193      	str	r3, [r2, #24]
 80004f0:	4b1e      	ldr	r3, [pc, #120]	; (800056c <MX_GPIO_Init+0xb4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	f003 0308 	and.w	r3, r3, #8
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CHECK_SUCCESSFULL_Pin|LED_RED_HORIZONTAL_Pin|LED_AMBER_HORIZONTAL_Pin|LED_GREEN_HORIZONTAL_Pin
 80004fc:	2200      	movs	r2, #0
 80004fe:	f647 71f0 	movw	r1, #32752	; 0x7ff0
 8000502:	481b      	ldr	r0, [pc, #108]	; (8000570 <MX_GPIO_Init+0xb8>)
 8000504:	f001 fbb3 	bl	8001c6e <HAL_GPIO_WritePin>
                          |LED_RED_VERTICAL_Pin|LED_AMBER_VERTICAL_Pin|LED_GREEN_VERTICAL_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_SEG_Pin|B_SEG_Pin|C_SEG_Pin|D_SEG_Pin
 8000508:	2200      	movs	r2, #0
 800050a:	217f      	movs	r1, #127	; 0x7f
 800050c:	4819      	ldr	r0, [pc, #100]	; (8000574 <MX_GPIO_Init+0xbc>)
 800050e:	f001 fbae 	bl	8001c6e <HAL_GPIO_WritePin>
                          |E_SEG_Pin|F_SEG_Pin|G_SEG_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SELECT_MODE_BUTTON_Pin MODIFY_BUTTOON_Pin SET_VALUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = SELECT_MODE_BUTTON_Pin|MODIFY_BUTTOON_Pin|SET_VALUE_BUTTON_Pin;
 8000512:	230e      	movs	r3, #14
 8000514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051e:	f107 0308 	add.w	r3, r7, #8
 8000522:	4619      	mov	r1, r3
 8000524:	4812      	ldr	r0, [pc, #72]	; (8000570 <MX_GPIO_Init+0xb8>)
 8000526:	f001 fa11 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : CHECK_SUCCESSFULL_Pin LED_RED_HORIZONTAL_Pin LED_AMBER_HORIZONTAL_Pin LED_GREEN_HORIZONTAL_Pin
                           LED_RED_VERTICAL_Pin LED_AMBER_VERTICAL_Pin LED_GREEN_VERTICAL_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = CHECK_SUCCESSFULL_Pin|LED_RED_HORIZONTAL_Pin|LED_AMBER_HORIZONTAL_Pin|LED_GREEN_HORIZONTAL_Pin
 800052a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800052e:	60bb      	str	r3, [r7, #8]
                          |LED_RED_VERTICAL_Pin|LED_AMBER_VERTICAL_Pin|LED_GREEN_VERTICAL_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000530:	2301      	movs	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000538:	2302      	movs	r3, #2
 800053a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053c:	f107 0308 	add.w	r3, r7, #8
 8000540:	4619      	mov	r1, r3
 8000542:	480b      	ldr	r0, [pc, #44]	; (8000570 <MX_GPIO_Init+0xb8>)
 8000544:	f001 fa02 	bl	800194c <HAL_GPIO_Init>

  /*Configure GPIO pins : A_SEG_Pin B_SEG_Pin C_SEG_Pin D_SEG_Pin
                           E_SEG_Pin F_SEG_Pin G_SEG_Pin */
  GPIO_InitStruct.Pin = A_SEG_Pin|B_SEG_Pin|C_SEG_Pin|D_SEG_Pin
 8000548:	237f      	movs	r3, #127	; 0x7f
 800054a:	60bb      	str	r3, [r7, #8]
                          |E_SEG_Pin|F_SEG_Pin|G_SEG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800054c:	2301      	movs	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000554:	2302      	movs	r3, #2
 8000556:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 0308 	add.w	r3, r7, #8
 800055c:	4619      	mov	r1, r3
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_GPIO_Init+0xbc>)
 8000560:	f001 f9f4 	bl	800194c <HAL_GPIO_Init>

}
 8000564:	bf00      	nop
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000
 8000570:	40010800 	.word	0x40010800
 8000574:	40010c00 	.word	0x40010c00

08000578 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000580:	f000 feaa 	bl	80012d8 <timerRun>
	getKeyInput();
 8000584:	f7ff fe0a 	bl	800019c <getKeyInput>
	getKeyInput1();
 8000588:	f7ff fe56 	bl	8000238 <getKeyInput1>
	getKeyInput2();
 800058c:	f7ff fea2 	bl	80002d4 <getKeyInput2>
}
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800059c:	b672      	cpsid	i
}
 800059e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <Error_Handler+0x8>
	...

080005a4 <mode2_run>:

#include <mode.h>

int led_status_mode2=0;

void mode2_run(){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	if(timer1_flag==1){
 80005a8:	4b24      	ldr	r3, [pc, #144]	; (800063c <mode2_run+0x98>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d119      	bne.n	80005e4 <mode2_run+0x40>
		setTimer1(50);
 80005b0:	2032      	movs	r0, #50	; 0x32
 80005b2:	f000 fe55 	bl	8001260 <setTimer1>
		led_status_mode2=1-led_status_mode2;
 80005b6:	4b22      	ldr	r3, [pc, #136]	; (8000640 <mode2_run+0x9c>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	f1c3 0301 	rsb	r3, r3, #1
 80005be:	4a20      	ldr	r2, [pc, #128]	; (8000640 <mode2_run+0x9c>)
 80005c0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, led_status_mode2);
 80005c2:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <mode2_run+0x9c>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	b2db      	uxtb	r3, r3
 80005c8:	461a      	mov	r2, r3
 80005ca:	2120      	movs	r1, #32
 80005cc:	481d      	ldr	r0, [pc, #116]	; (8000644 <mode2_run+0xa0>)
 80005ce:	f001 fb4e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, led_status_mode2);
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <mode2_run+0x9c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005de:	4819      	ldr	r0, [pc, #100]	; (8000644 <mode2_run+0xa0>)
 80005e0:	f001 fb45 	bl	8001c6e <HAL_GPIO_WritePin>
	}
	if(modify_check==0){
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <mode2_run+0xa4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d103      	bne.n	80005f4 <mode2_run+0x50>
		tmp_timer=red_timer_global;
 80005ec:	4b17      	ldr	r3, [pc, #92]	; (800064c <mode2_run+0xa8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a17      	ldr	r2, [pc, #92]	; (8000650 <mode2_run+0xac>)
 80005f2:	6013      	str	r3, [r2, #0]
	}
	update_buffer(tmp_timer, 2);
 80005f4:	4b16      	ldr	r3, [pc, #88]	; (8000650 <mode2_run+0xac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2102      	movs	r1, #2
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fcfc 	bl	8000ff8 <update_buffer>
	display_for_mode();
 8000600:	f000 fe10 	bl	8001224 <display_for_mode>
	modify_run(RED);
 8000604:	201e      	movs	r0, #30
 8000606:	f000 f8d5 	bl	80007b4 <modify_run>
	HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, SET);
 800060a:	2201      	movs	r2, #1
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	480d      	ldr	r0, [pc, #52]	; (8000644 <mode2_run+0xa0>)
 8000610:	f001 fb2d 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, SET);
 8000614:	2201      	movs	r2, #1
 8000616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <mode2_run+0xa0>)
 800061c:	f001 fb27 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, SET);
 8000620:	2201      	movs	r2, #1
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <mode2_run+0xa0>)
 8000626:	f001 fb22 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, SET);
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <mode2_run+0xa0>)
 8000632:	f001 fb1c 	bl	8001c6e <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000c4 	.word	0x200000c4
 8000640:	200000b8 	.word	0x200000b8
 8000644:	40010800 	.word	0x40010800
 8000648:	200000b4 	.word	0x200000b4
 800064c:	2000004c 	.word	0x2000004c
 8000650:	200000b0 	.word	0x200000b0

08000654 <mode3_run>:

void mode3_run(){
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
	if(timer1_flag==1){
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <mode3_run+0x98>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b01      	cmp	r3, #1
 800065e:	d119      	bne.n	8000694 <mode3_run+0x40>
		setTimer1(50);
 8000660:	2032      	movs	r0, #50	; 0x32
 8000662:	f000 fdfd 	bl	8001260 <setTimer1>
		led_status_mode2=1-led_status_mode2;
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <mode3_run+0x9c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f1c3 0301 	rsb	r3, r3, #1
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <mode3_run+0x9c>)
 8000670:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, led_status_mode2);
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <mode3_run+0x9c>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	b2db      	uxtb	r3, r3
 8000678:	461a      	mov	r2, r3
 800067a:	2140      	movs	r1, #64	; 0x40
 800067c:	481d      	ldr	r0, [pc, #116]	; (80006f4 <mode3_run+0xa0>)
 800067e:	f001 faf6 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, led_status_mode2);
 8000682:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <mode3_run+0x9c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068e:	4819      	ldr	r0, [pc, #100]	; (80006f4 <mode3_run+0xa0>)
 8000690:	f001 faed 	bl	8001c6e <HAL_GPIO_WritePin>
	}
	if(modify_check==0){
 8000694:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <mode3_run+0xa4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <mode3_run+0x50>
		tmp_timer=amber_timer_global;
 800069c:	4b17      	ldr	r3, [pc, #92]	; (80006fc <mode3_run+0xa8>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a17      	ldr	r2, [pc, #92]	; (8000700 <mode3_run+0xac>)
 80006a2:	6013      	str	r3, [r2, #0]
	}
	update_buffer(tmp_timer, 3);
 80006a4:	4b16      	ldr	r3, [pc, #88]	; (8000700 <mode3_run+0xac>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2103      	movs	r1, #3
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fca4 	bl	8000ff8 <update_buffer>
	display_for_mode();
 80006b0:	f000 fdb8 	bl	8001224 <display_for_mode>
	modify_run(AMBER);
 80006b4:	201f      	movs	r0, #31
 80006b6:	f000 f87d 	bl	80007b4 <modify_run>
	HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, SET);
 80006ba:	2201      	movs	r2, #1
 80006bc:	2120      	movs	r1, #32
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <mode3_run+0xa0>)
 80006c0:	f001 fad5 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006ca:	480a      	ldr	r0, [pc, #40]	; (80006f4 <mode3_run+0xa0>)
 80006cc:	f001 facf 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, SET);
 80006d0:	2201      	movs	r2, #1
 80006d2:	2180      	movs	r1, #128	; 0x80
 80006d4:	4807      	ldr	r0, [pc, #28]	; (80006f4 <mode3_run+0xa0>)
 80006d6:	f001 faca 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <mode3_run+0xa0>)
 80006e2:	f001 fac4 	bl	8001c6e <HAL_GPIO_WritePin>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200000c4 	.word	0x200000c4
 80006f0:	200000b8 	.word	0x200000b8
 80006f4:	40010800 	.word	0x40010800
 80006f8:	200000b4 	.word	0x200000b4
 80006fc:	20000050 	.word	0x20000050
 8000700:	200000b0 	.word	0x200000b0

08000704 <mode4_run>:

void mode4_run(){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	if(timer1_flag==1){
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <mode4_run+0x98>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d119      	bne.n	8000744 <mode4_run+0x40>
		setTimer1(50);
 8000710:	2032      	movs	r0, #50	; 0x32
 8000712:	f000 fda5 	bl	8001260 <setTimer1>
		led_status_mode2=1-led_status_mode2;
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <mode4_run+0x9c>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f1c3 0301 	rsb	r3, r3, #1
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <mode4_run+0x9c>)
 8000720:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, led_status_mode2);
 8000722:	4b1f      	ldr	r3, [pc, #124]	; (80007a0 <mode4_run+0x9c>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	481d      	ldr	r0, [pc, #116]	; (80007a4 <mode4_run+0xa0>)
 800072e:	f001 fa9e 	bl	8001c6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, led_status_mode2);
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <mode4_run+0x9c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	b2db      	uxtb	r3, r3
 8000738:	461a      	mov	r2, r3
 800073a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073e:	4819      	ldr	r0, [pc, #100]	; (80007a4 <mode4_run+0xa0>)
 8000740:	f001 fa95 	bl	8001c6e <HAL_GPIO_WritePin>
	}
	if(modify_check==0){
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <mode4_run+0xa4>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <mode4_run+0x50>
		tmp_timer=green_timer_global;
 800074c:	4b17      	ldr	r3, [pc, #92]	; (80007ac <mode4_run+0xa8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a17      	ldr	r2, [pc, #92]	; (80007b0 <mode4_run+0xac>)
 8000752:	6013      	str	r3, [r2, #0]
	}
	update_buffer(tmp_timer, 4);
 8000754:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <mode4_run+0xac>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2104      	movs	r1, #4
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fc4c 	bl	8000ff8 <update_buffer>
	display_for_mode();
 8000760:	f000 fd60 	bl	8001224 <display_for_mode>
	modify_run(GREEN);
 8000764:	2020      	movs	r0, #32
 8000766:	f000 f825 	bl	80007b4 <modify_run>
	HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2140      	movs	r1, #64	; 0x40
 800076e:	480d      	ldr	r0, [pc, #52]	; (80007a4 <mode4_run+0xa0>)
 8000770:	f001 fa7d 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	f44f 7100 	mov.w	r1, #512	; 0x200
 800077a:	480a      	ldr	r0, [pc, #40]	; (80007a4 <mode4_run+0xa0>)
 800077c:	f001 fa77 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, SET);
 8000780:	2201      	movs	r2, #1
 8000782:	2120      	movs	r1, #32
 8000784:	4807      	ldr	r0, [pc, #28]	; (80007a4 <mode4_run+0xa0>)
 8000786:	f001 fa72 	bl	8001c6e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, SET);
 800078a:	2201      	movs	r2, #1
 800078c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000790:	4804      	ldr	r0, [pc, #16]	; (80007a4 <mode4_run+0xa0>)
 8000792:	f001 fa6c 	bl	8001c6e <HAL_GPIO_WritePin>
}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200000c4 	.word	0x200000c4
 80007a0:	200000b8 	.word	0x200000b8
 80007a4:	40010800 	.word	0x40010800
 80007a8:	200000b4 	.word	0x200000b4
 80007ac:	20000054 	.word	0x20000054
 80007b0:	200000b0 	.word	0x200000b0

080007b4 <modify_run>:
 *      Author: PC
 */

#include "modify.h"

void modify_run(int led){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	modify_check=1;
 80007bc:	4b2b      	ldr	r3, [pc, #172]	; (800086c <modify_run+0xb8>)
 80007be:	2201      	movs	r2, #1
 80007c0:	601a      	str	r2, [r3, #0]
	switch(led){
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b20      	cmp	r3, #32
 80007c6:	d031      	beq.n	800082c <modify_run+0x78>
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b20      	cmp	r3, #32
 80007cc:	dc42      	bgt.n	8000854 <modify_run+0xa0>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b1e      	cmp	r3, #30
 80007d2:	d003      	beq.n	80007dc <modify_run+0x28>
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b1f      	cmp	r3, #31
 80007d8:	d014      	beq.n	8000804 <modify_run+0x50>
				tmp_timer=0;
			}
		}
		break;
	default:
			break;
 80007da:	e03b      	b.n	8000854 <modify_run+0xa0>
		if(button2_flag==1){
 80007dc:	4b24      	ldr	r3, [pc, #144]	; (8000870 <modify_run+0xbc>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2b01      	cmp	r3, #1
 80007e2:	d139      	bne.n	8000858 <modify_run+0xa4>
			button2_flag=0;
 80007e4:	4b22      	ldr	r3, [pc, #136]	; (8000870 <modify_run+0xbc>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			tmp_timer++;
 80007ea:	4b22      	ldr	r3, [pc, #136]	; (8000874 <modify_run+0xc0>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	4a20      	ldr	r2, [pc, #128]	; (8000874 <modify_run+0xc0>)
 80007f2:	6013      	str	r3, [r2, #0]
			if(tmp_timer>=100){
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <modify_run+0xc0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b63      	cmp	r3, #99	; 0x63
 80007fa:	dd2d      	ble.n	8000858 <modify_run+0xa4>
				tmp_timer=0;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <modify_run+0xc0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
		break;
 8000802:	e029      	b.n	8000858 <modify_run+0xa4>
		if(button2_flag==1){
 8000804:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <modify_run+0xbc>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d127      	bne.n	800085c <modify_run+0xa8>
			button2_flag=0;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <modify_run+0xbc>)
 800080e:	2200      	movs	r2, #0
 8000810:	601a      	str	r2, [r3, #0]
			tmp_timer++;
 8000812:	4b18      	ldr	r3, [pc, #96]	; (8000874 <modify_run+0xc0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a16      	ldr	r2, [pc, #88]	; (8000874 <modify_run+0xc0>)
 800081a:	6013      	str	r3, [r2, #0]
			if(tmp_timer>=100){
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <modify_run+0xc0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b63      	cmp	r3, #99	; 0x63
 8000822:	dd1b      	ble.n	800085c <modify_run+0xa8>
				tmp_timer=0;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <modify_run+0xc0>)
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
		break;
 800082a:	e017      	b.n	800085c <modify_run+0xa8>
		if(button2_flag==1){
 800082c:	4b10      	ldr	r3, [pc, #64]	; (8000870 <modify_run+0xbc>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d115      	bne.n	8000860 <modify_run+0xac>
			button2_flag=0;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <modify_run+0xbc>)
 8000836:	2200      	movs	r2, #0
 8000838:	601a      	str	r2, [r3, #0]
			tmp_timer++;
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <modify_run+0xc0>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	3301      	adds	r3, #1
 8000840:	4a0c      	ldr	r2, [pc, #48]	; (8000874 <modify_run+0xc0>)
 8000842:	6013      	str	r3, [r2, #0]
			if(tmp_timer>=100){
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <modify_run+0xc0>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b63      	cmp	r3, #99	; 0x63
 800084a:	dd09      	ble.n	8000860 <modify_run+0xac>
				tmp_timer=0;
 800084c:	4b09      	ldr	r3, [pc, #36]	; (8000874 <modify_run+0xc0>)
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
		break;
 8000852:	e005      	b.n	8000860 <modify_run+0xac>
			break;
 8000854:	bf00      	nop
 8000856:	e004      	b.n	8000862 <modify_run+0xae>
		break;
 8000858:	bf00      	nop
 800085a:	e002      	b.n	8000862 <modify_run+0xae>
		break;
 800085c:	bf00      	nop
 800085e:	e000      	b.n	8000862 <modify_run+0xae>
		break;
 8000860:	bf00      	nop
	}
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	bc80      	pop	{r7}
 800086a:	4770      	bx	lr
 800086c:	200000b4 	.word	0x200000b4
 8000870:	2000008c 	.word	0x2000008c
 8000874:	200000b0 	.word	0x200000b0

08000878 <selecting_mode_run>:
 *      Author: PC
 */

#include "selecting_mode.h"

void selecting_mode_run(){
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	switch(mode){
 800087c:	4b52      	ldr	r3, [pc, #328]	; (80009c8 <selecting_mode_run+0x150>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b04      	cmp	r3, #4
 8000882:	f200 8095 	bhi.w	80009b0 <selecting_mode_run+0x138>
 8000886:	a201      	add	r2, pc, #4	; (adr r2, 800088c <selecting_mode_run+0x14>)
 8000888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800088c:	080008a1 	.word	0x080008a1
 8000890:	080008b3 	.word	0x080008b3
 8000894:	080008d3 	.word	0x080008d3
 8000898:	0800091d 	.word	0x0800091d
 800089c:	08000967 	.word	0x08000967
		case INIT:
			mode=MODE01;
 80008a0:	4b49      	ldr	r3, [pc, #292]	; (80009c8 <selecting_mode_run+0x150>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, SET);
 80008a6:	2201      	movs	r2, #1
 80008a8:	2110      	movs	r1, #16
 80008aa:	4848      	ldr	r0, [pc, #288]	; (80009cc <selecting_mode_run+0x154>)
 80008ac:	f001 f9df 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80008b0:	e087      	b.n	80009c2 <selecting_mode_run+0x14a>
		case MODE01:
			trafic_light_run();
 80008b2:	f000 fde1 	bl	8001478 <trafic_light_run>
			if(button1_flag==1){
 80008b6:	4b46      	ldr	r3, [pc, #280]	; (80009d0 <selecting_mode_run+0x158>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d17a      	bne.n	80009b4 <selecting_mode_run+0x13c>
				button1_flag=0;
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <selecting_mode_run+0x158>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
				modify_check=0;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <selecting_mode_run+0x15c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
				mode = MODE02;
 80008ca:	4b3f      	ldr	r3, [pc, #252]	; (80009c8 <selecting_mode_run+0x150>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80008d0:	e070      	b.n	80009b4 <selecting_mode_run+0x13c>
		case MODE02:
			mode2_run();
 80008d2:	f7ff fe67 	bl	80005a4 <mode2_run>
			if(button1_flag==1){
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <selecting_mode_run+0x158>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d10d      	bne.n	80008fa <selecting_mode_run+0x82>
				button1_flag=0;
 80008de:	4b3c      	ldr	r3, [pc, #240]	; (80009d0 <selecting_mode_run+0x158>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
				modify_check=0;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <selecting_mode_run+0x15c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
				mode = MODE03;
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <selecting_mode_run+0x150>)
 80008ec:	2203      	movs	r2, #3
 80008ee:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2110      	movs	r1, #16
 80008f4:	4835      	ldr	r0, [pc, #212]	; (80009cc <selecting_mode_run+0x154>)
 80008f6:	f001 f9ba 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			if(button3_flag==1){
 80008fa:	4b37      	ldr	r3, [pc, #220]	; (80009d8 <selecting_mode_run+0x160>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d15a      	bne.n	80009b8 <selecting_mode_run+0x140>
				button3_flag=0;
 8000902:	4b35      	ldr	r3, [pc, #212]	; (80009d8 <selecting_mode_run+0x160>)
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
				red_timer_global=tmp_timer;
 8000908:	4b34      	ldr	r3, [pc, #208]	; (80009dc <selecting_mode_run+0x164>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a34      	ldr	r2, [pc, #208]	; (80009e0 <selecting_mode_run+0x168>)
 800090e:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2110      	movs	r1, #16
 8000914:	482d      	ldr	r0, [pc, #180]	; (80009cc <selecting_mode_run+0x154>)
 8000916:	f001 f9aa 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			break;
 800091a:	e04d      	b.n	80009b8 <selecting_mode_run+0x140>
		case MODE03:
			mode3_run();
 800091c:	f7ff fe9a 	bl	8000654 <mode3_run>
			if(button1_flag==1){
 8000920:	4b2b      	ldr	r3, [pc, #172]	; (80009d0 <selecting_mode_run+0x158>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10d      	bne.n	8000944 <selecting_mode_run+0xcc>
				button1_flag=0;
 8000928:	4b29      	ldr	r3, [pc, #164]	; (80009d0 <selecting_mode_run+0x158>)
 800092a:	2200      	movs	r2, #0
 800092c:	601a      	str	r2, [r3, #0]
				modify_check=0;
 800092e:	4b29      	ldr	r3, [pc, #164]	; (80009d4 <selecting_mode_run+0x15c>)
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
				mode = MODE04;
 8000934:	4b24      	ldr	r3, [pc, #144]	; (80009c8 <selecting_mode_run+0x150>)
 8000936:	2204      	movs	r2, #4
 8000938:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2110      	movs	r1, #16
 800093e:	4823      	ldr	r0, [pc, #140]	; (80009cc <selecting_mode_run+0x154>)
 8000940:	f001 f995 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			if(button3_flag==1){
 8000944:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <selecting_mode_run+0x160>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2b01      	cmp	r3, #1
 800094a:	d137      	bne.n	80009bc <selecting_mode_run+0x144>
				button3_flag=0;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <selecting_mode_run+0x160>)
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
				amber_timer_global=tmp_timer;
 8000952:	4b22      	ldr	r3, [pc, #136]	; (80009dc <selecting_mode_run+0x164>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <selecting_mode_run+0x16c>)
 8000958:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, RESET);
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	481b      	ldr	r0, [pc, #108]	; (80009cc <selecting_mode_run+0x154>)
 8000960:	f001 f985 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			break;
 8000964:	e02a      	b.n	80009bc <selecting_mode_run+0x144>
		case MODE04:
			mode4_run();
 8000966:	f7ff fecd 	bl	8000704 <mode4_run>
			if(button1_flag==1){
 800096a:	4b19      	ldr	r3, [pc, #100]	; (80009d0 <selecting_mode_run+0x158>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d10d      	bne.n	800098e <selecting_mode_run+0x116>
				button1_flag=0;
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <selecting_mode_run+0x158>)
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
				modify_check=0;
 8000978:	4b16      	ldr	r3, [pc, #88]	; (80009d4 <selecting_mode_run+0x15c>)
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
				mode = MODE01;
 800097e:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <selecting_mode_run+0x150>)
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, SET);
 8000984:	2201      	movs	r2, #1
 8000986:	2110      	movs	r1, #16
 8000988:	4810      	ldr	r0, [pc, #64]	; (80009cc <selecting_mode_run+0x154>)
 800098a:	f001 f970 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			if(button3_flag==1){
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <selecting_mode_run+0x160>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d114      	bne.n	80009c0 <selecting_mode_run+0x148>
				button3_flag=0;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <selecting_mode_run+0x160>)
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
				green_timer_global=tmp_timer;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <selecting_mode_run+0x164>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a11      	ldr	r2, [pc, #68]	; (80009e8 <selecting_mode_run+0x170>)
 80009a2:	6013      	str	r3, [r2, #0]
				HAL_GPIO_WritePin(CHECK_SUCCESSFULL_GPIO_Port, CHECK_SUCCESSFULL_Pin, RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	2110      	movs	r1, #16
 80009a8:	4808      	ldr	r0, [pc, #32]	; (80009cc <selecting_mode_run+0x154>)
 80009aa:	f001 f960 	bl	8001c6e <HAL_GPIO_WritePin>
			}
			break;
 80009ae:	e007      	b.n	80009c0 <selecting_mode_run+0x148>
		default:

			break;
 80009b0:	bf00      	nop
 80009b2:	e006      	b.n	80009c2 <selecting_mode_run+0x14a>
			break;
 80009b4:	bf00      	nop
 80009b6:	e004      	b.n	80009c2 <selecting_mode_run+0x14a>
			break;
 80009b8:	bf00      	nop
 80009ba:	e002      	b.n	80009c2 <selecting_mode_run+0x14a>
			break;
 80009bc:	bf00      	nop
 80009be:	e000      	b.n	80009c2 <selecting_mode_run+0x14a>
			break;
 80009c0:	bf00      	nop
	}
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000094 	.word	0x20000094
 80009cc:	40010800 	.word	0x40010800
 80009d0:	20000088 	.word	0x20000088
 80009d4:	200000b4 	.word	0x200000b4
 80009d8:	20000090 	.word	0x20000090
 80009dc:	200000b0 	.word	0x200000b0
 80009e0:	2000004c 	.word	0x2000004c
 80009e4:	20000050 	.word	0x20000050
 80009e8:	20000054 	.word	0x20000054

080009ec <seven_led_seg_display>:
 *      Author: PC
 */

#include "seven_seg_led_display.h"

void seven_led_seg_display(int value){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b20      	cmp	r3, #32
 80009f8:	f200 821c 	bhi.w	8000e34 <seven_led_seg_display+0x448>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <seven_led_seg_display+0x18>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a89 	.word	0x08000a89
 8000a08:	08000ad1 	.word	0x08000ad1
 8000a0c:	08000b19 	.word	0x08000b19
 8000a10:	08000b61 	.word	0x08000b61
 8000a14:	08000ba9 	.word	0x08000ba9
 8000a18:	08000bf1 	.word	0x08000bf1
 8000a1c:	08000c39 	.word	0x08000c39
 8000a20:	08000c81 	.word	0x08000c81
 8000a24:	08000cc9 	.word	0x08000cc9
 8000a28:	08000d11 	.word	0x08000d11
 8000a2c:	08000e35 	.word	0x08000e35
 8000a30:	08000e35 	.word	0x08000e35
 8000a34:	08000e35 	.word	0x08000e35
 8000a38:	08000e35 	.word	0x08000e35
 8000a3c:	08000e35 	.word	0x08000e35
 8000a40:	08000e35 	.word	0x08000e35
 8000a44:	08000e35 	.word	0x08000e35
 8000a48:	08000e35 	.word	0x08000e35
 8000a4c:	08000e35 	.word	0x08000e35
 8000a50:	08000e35 	.word	0x08000e35
 8000a54:	08000e35 	.word	0x08000e35
 8000a58:	08000e35 	.word	0x08000e35
 8000a5c:	08000e35 	.word	0x08000e35
 8000a60:	08000e35 	.word	0x08000e35
 8000a64:	08000e35 	.word	0x08000e35
 8000a68:	08000e35 	.word	0x08000e35
 8000a6c:	08000e35 	.word	0x08000e35
 8000a70:	08000e35 	.word	0x08000e35
 8000a74:	08000e35 	.word	0x08000e35
 8000a78:	08000e35 	.word	0x08000e35
 8000a7c:	08000d59 	.word	0x08000d59
 8000a80:	08000da5 	.word	0x08000da5
 8000a84:	08000ded 	.word	0x08000ded
	switch(value){
			case 0:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	48c4      	ldr	r0, [pc, #784]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000a8e:	f001 f8ee 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000a92:	2200      	movs	r2, #0
 8000a94:	2102      	movs	r1, #2
 8000a96:	48c2      	ldr	r0, [pc, #776]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000a98:	f001 f8e9 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	48bf      	ldr	r0, [pc, #764]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000aa2:	f001 f8e4 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2108      	movs	r1, #8
 8000aaa:	48bd      	ldr	r0, [pc, #756]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000aac:	f001 f8df 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2110      	movs	r1, #16
 8000ab4:	48ba      	ldr	r0, [pc, #744]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ab6:	f001 f8da 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000aba:	2200      	movs	r2, #0
 8000abc:	2120      	movs	r1, #32
 8000abe:	48b8      	ldr	r0, [pc, #736]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ac0:	f001 f8d5 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	2140      	movs	r1, #64	; 0x40
 8000ac8:	48b5      	ldr	r0, [pc, #724]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000aca:	f001 f8d0 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000ace:	e1d5      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 1:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	48b2      	ldr	r0, [pc, #712]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ad6:	f001 f8ca 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2102      	movs	r1, #2
 8000ade:	48b0      	ldr	r0, [pc, #704]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ae0:	f001 f8c5 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	48ad      	ldr	r0, [pc, #692]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000aea:	f001 f8c0 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000aee:	2201      	movs	r2, #1
 8000af0:	2108      	movs	r1, #8
 8000af2:	48ab      	ldr	r0, [pc, #684]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000af4:	f001 f8bb 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	2110      	movs	r1, #16
 8000afc:	48a8      	ldr	r0, [pc, #672]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000afe:	f001 f8b6 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	2120      	movs	r1, #32
 8000b06:	48a6      	ldr	r0, [pc, #664]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b08:	f001 f8b1 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	2140      	movs	r1, #64	; 0x40
 8000b10:	48a3      	ldr	r0, [pc, #652]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b12:	f001 f8ac 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000b16:	e1b1      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 2:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	48a0      	ldr	r0, [pc, #640]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b1e:	f001 f8a6 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2102      	movs	r1, #2
 8000b26:	489e      	ldr	r0, [pc, #632]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b28:	f001 f8a1 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2104      	movs	r1, #4
 8000b30:	489b      	ldr	r0, [pc, #620]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b32:	f001 f89c 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2108      	movs	r1, #8
 8000b3a:	4899      	ldr	r0, [pc, #612]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b3c:	f001 f897 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2110      	movs	r1, #16
 8000b44:	4896      	ldr	r0, [pc, #600]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b46:	f001 f892 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2120      	movs	r1, #32
 8000b4e:	4894      	ldr	r0, [pc, #592]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b50:	f001 f88d 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2140      	movs	r1, #64	; 0x40
 8000b58:	4891      	ldr	r0, [pc, #580]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b5a:	f001 f888 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000b5e:	e18d      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 3:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000b60:	2200      	movs	r2, #0
 8000b62:	2101      	movs	r1, #1
 8000b64:	488e      	ldr	r0, [pc, #568]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b66:	f001 f882 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2102      	movs	r1, #2
 8000b6e:	488c      	ldr	r0, [pc, #560]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b70:	f001 f87d 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2104      	movs	r1, #4
 8000b78:	4889      	ldr	r0, [pc, #548]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b7a:	f001 f878 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2108      	movs	r1, #8
 8000b82:	4887      	ldr	r0, [pc, #540]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b84:	f001 f873 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	2110      	movs	r1, #16
 8000b8c:	4884      	ldr	r0, [pc, #528]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b8e:	f001 f86e 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2120      	movs	r1, #32
 8000b96:	4882      	ldr	r0, [pc, #520]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000b98:	f001 f869 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2140      	movs	r1, #64	; 0x40
 8000ba0:	487f      	ldr	r0, [pc, #508]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ba2:	f001 f864 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000ba6:	e169      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 4:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	2101      	movs	r1, #1
 8000bac:	487c      	ldr	r0, [pc, #496]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bae:	f001 f85e 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	487a      	ldr	r0, [pc, #488]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bb8:	f001 f859 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	4877      	ldr	r0, [pc, #476]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bc2:	f001 f854 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2108      	movs	r1, #8
 8000bca:	4875      	ldr	r0, [pc, #468]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bcc:	f001 f84f 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	4872      	ldr	r0, [pc, #456]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bd6:	f001 f84a 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2120      	movs	r1, #32
 8000bde:	4870      	ldr	r0, [pc, #448]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000be0:	f001 f845 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	486d      	ldr	r0, [pc, #436]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bea:	f001 f840 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000bee:	e145      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 5:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2101      	movs	r1, #1
 8000bf4:	486a      	ldr	r0, [pc, #424]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000bf6:	f001 f83a 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4868      	ldr	r0, [pc, #416]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c00:	f001 f835 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2104      	movs	r1, #4
 8000c08:	4865      	ldr	r0, [pc, #404]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c0a:	f001 f830 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2108      	movs	r1, #8
 8000c12:	4863      	ldr	r0, [pc, #396]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c14:	f001 f82b 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	2110      	movs	r1, #16
 8000c1c:	4860      	ldr	r0, [pc, #384]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c1e:	f001 f826 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	485e      	ldr	r0, [pc, #376]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c28:	f001 f821 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2140      	movs	r1, #64	; 0x40
 8000c30:	485b      	ldr	r0, [pc, #364]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c32:	f001 f81c 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000c36:	e121      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 6:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4858      	ldr	r0, [pc, #352]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c3e:	f001 f816 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000c42:	2201      	movs	r2, #1
 8000c44:	2102      	movs	r1, #2
 8000c46:	4856      	ldr	r0, [pc, #344]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c48:	f001 f811 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	2104      	movs	r1, #4
 8000c50:	4853      	ldr	r0, [pc, #332]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c52:	f001 f80c 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2108      	movs	r1, #8
 8000c5a:	4851      	ldr	r0, [pc, #324]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c5c:	f001 f807 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	2110      	movs	r1, #16
 8000c64:	484e      	ldr	r0, [pc, #312]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c66:	f001 f802 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2120      	movs	r1, #32
 8000c6e:	484c      	ldr	r0, [pc, #304]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c70:	f000 fffd 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2140      	movs	r1, #64	; 0x40
 8000c78:	4849      	ldr	r0, [pc, #292]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c7a:	f000 fff8 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000c7e:	e0fd      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 7:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2101      	movs	r1, #1
 8000c84:	4846      	ldr	r0, [pc, #280]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c86:	f000 fff2 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2102      	movs	r1, #2
 8000c8e:	4844      	ldr	r0, [pc, #272]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c90:	f000 ffed 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2104      	movs	r1, #4
 8000c98:	4841      	ldr	r0, [pc, #260]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000c9a:	f000 ffe8 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	2108      	movs	r1, #8
 8000ca2:	483f      	ldr	r0, [pc, #252]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ca4:	f000 ffe3 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000ca8:	2201      	movs	r2, #1
 8000caa:	2110      	movs	r1, #16
 8000cac:	483c      	ldr	r0, [pc, #240]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cae:	f000 ffde 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_SET);
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2120      	movs	r1, #32
 8000cb6:	483a      	ldr	r0, [pc, #232]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cb8:	f000 ffd9 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	4837      	ldr	r0, [pc, #220]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cc2:	f000 ffd4 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000cc6:	e0d9      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 8:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2101      	movs	r1, #1
 8000ccc:	4834      	ldr	r0, [pc, #208]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cce:	f000 ffce 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4832      	ldr	r0, [pc, #200]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cd8:	f000 ffc9 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2104      	movs	r1, #4
 8000ce0:	482f      	ldr	r0, [pc, #188]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000ce2:	f000 ffc4 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2108      	movs	r1, #8
 8000cea:	482d      	ldr	r0, [pc, #180]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cec:	f000 ffbf 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	2110      	movs	r1, #16
 8000cf4:	482a      	ldr	r0, [pc, #168]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000cf6:	f000 ffba 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	4828      	ldr	r0, [pc, #160]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d00:	f000 ffb5 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2140      	movs	r1, #64	; 0x40
 8000d08:	4825      	ldr	r0, [pc, #148]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d0a:	f000 ffb0 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000d0e:	e0b5      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 9:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2101      	movs	r1, #1
 8000d14:	4822      	ldr	r0, [pc, #136]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d16:	f000 ffaa 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2102      	movs	r1, #2
 8000d1e:	4820      	ldr	r0, [pc, #128]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d20:	f000 ffa5 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2104      	movs	r1, #4
 8000d28:	481d      	ldr	r0, [pc, #116]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d2a:	f000 ffa0 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2108      	movs	r1, #8
 8000d32:	481b      	ldr	r0, [pc, #108]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d34:	f000 ff9b 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4818      	ldr	r0, [pc, #96]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d3e:	f000 ff96 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2120      	movs	r1, #32
 8000d46:	4816      	ldr	r0, [pc, #88]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d48:	f000 ff91 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2140      	movs	r1, #64	; 0x40
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d52:	f000 ff8c 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000d56:	e091      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 30:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2101      	movs	r1, #1
 8000d5c:	4810      	ldr	r0, [pc, #64]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d5e:	f000 ff86 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2102      	movs	r1, #2
 8000d66:	480e      	ldr	r0, [pc, #56]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d68:	f000 ff81 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2104      	movs	r1, #4
 8000d70:	480b      	ldr	r0, [pc, #44]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d72:	f000 ff7c 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000d76:	2201      	movs	r2, #1
 8000d78:	2108      	movs	r1, #8
 8000d7a:	4809      	ldr	r0, [pc, #36]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d7c:	f000 ff77 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2110      	movs	r1, #16
 8000d84:	4806      	ldr	r0, [pc, #24]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d86:	f000 ff72 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2120      	movs	r1, #32
 8000d8e:	4804      	ldr	r0, [pc, #16]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d90:	f000 ff6d 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	2140      	movs	r1, #64	; 0x40
 8000d98:	4801      	ldr	r0, [pc, #4]	; (8000da0 <seven_led_seg_display+0x3b4>)
 8000d9a:	f000 ff68 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000d9e:	e06d      	b.n	8000e7c <seven_led_seg_display+0x490>
 8000da0:	40010c00 	.word	0x40010c00
			case 31:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	2101      	movs	r1, #1
 8000da8:	4836      	ldr	r0, [pc, #216]	; (8000e84 <seven_led_seg_display+0x498>)
 8000daa:	f000 ff60 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2102      	movs	r1, #2
 8000db2:	4834      	ldr	r0, [pc, #208]	; (8000e84 <seven_led_seg_display+0x498>)
 8000db4:	f000 ff5b 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2104      	movs	r1, #4
 8000dbc:	4831      	ldr	r0, [pc, #196]	; (8000e84 <seven_led_seg_display+0x498>)
 8000dbe:	f000 ff56 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2108      	movs	r1, #8
 8000dc6:	482f      	ldr	r0, [pc, #188]	; (8000e84 <seven_led_seg_display+0x498>)
 8000dc8:	f000 ff51 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2110      	movs	r1, #16
 8000dd0:	482c      	ldr	r0, [pc, #176]	; (8000e84 <seven_led_seg_display+0x498>)
 8000dd2:	f000 ff4c 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2120      	movs	r1, #32
 8000dda:	482a      	ldr	r0, [pc, #168]	; (8000e84 <seven_led_seg_display+0x498>)
 8000ddc:	f000 ff47 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	2140      	movs	r1, #64	; 0x40
 8000de4:	4827      	ldr	r0, [pc, #156]	; (8000e84 <seven_led_seg_display+0x498>)
 8000de6:	f000 ff42 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000dea:	e047      	b.n	8000e7c <seven_led_seg_display+0x490>
			case 32:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2101      	movs	r1, #1
 8000df0:	4824      	ldr	r0, [pc, #144]	; (8000e84 <seven_led_seg_display+0x498>)
 8000df2:	f000 ff3c 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2102      	movs	r1, #2
 8000dfa:	4822      	ldr	r0, [pc, #136]	; (8000e84 <seven_led_seg_display+0x498>)
 8000dfc:	f000 ff37 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2104      	movs	r1, #4
 8000e04:	481f      	ldr	r0, [pc, #124]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e06:	f000 ff32 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2108      	movs	r1, #8
 8000e0e:	481d      	ldr	r0, [pc, #116]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e10:	f000 ff2d 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2110      	movs	r1, #16
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e1a:	f000 ff28 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2120      	movs	r1, #32
 8000e22:	4818      	ldr	r0, [pc, #96]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e24:	f000 ff23 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2140      	movs	r1, #64	; 0x40
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e2e:	f000 ff1e 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000e32:	e023      	b.n	8000e7c <seven_led_seg_display+0x490>
			default:
				HAL_GPIO_WritePin(A_SEG_GPIO_Port, A_SEG_Pin, GPIO_PIN_RESET);
 8000e34:	2200      	movs	r2, #0
 8000e36:	2101      	movs	r1, #1
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e3a:	f000 ff18 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(B_SEG_GPIO_Port, B_SEG_Pin, GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2102      	movs	r1, #2
 8000e42:	4810      	ldr	r0, [pc, #64]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e44:	f000 ff13 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(C_SEG_GPIO_Port, C_SEG_Pin, GPIO_PIN_SET);
 8000e48:	2201      	movs	r2, #1
 8000e4a:	2104      	movs	r1, #4
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e4e:	f000 ff0e 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(D_SEG_GPIO_Port, D_SEG_Pin, GPIO_PIN_SET);
 8000e52:	2201      	movs	r2, #1
 8000e54:	2108      	movs	r1, #8
 8000e56:	480b      	ldr	r0, [pc, #44]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e58:	f000 ff09 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(E_SEG_GPIO_Port, E_SEG_Pin, GPIO_PIN_SET);
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	2110      	movs	r1, #16
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e62:	f000 ff04 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(F_SEG_GPIO_Port, F_SEG_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2120      	movs	r1, #32
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e6c:	f000 feff 	bl	8001c6e <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(G_SEG_GPIO_Port, G_SEG_Pin, GPIO_PIN_RESET);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2140      	movs	r1, #64	; 0x40
 8000e74:	4803      	ldr	r0, [pc, #12]	; (8000e84 <seven_led_seg_display+0x498>)
 8000e76:	f000 fefa 	bl	8001c6e <HAL_GPIO_WritePin>
				break;
 8000e7a:	bf00      	nop
		}
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40010c00 	.word	0x40010c00

08000e88 <update7SEG>:

void update7SEG(int index){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	f200 808c 	bhi.w	8000fb0 <update7SEG+0x128>
 8000e98:	a201      	add	r2, pc, #4	; (adr r2, 8000ea0 <update7SEG+0x18>)
 8000e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e9e:	bf00      	nop
 8000ea0:	08000eb1 	.word	0x08000eb1
 8000ea4:	08000ef1 	.word	0x08000ef1
 8000ea8:	08000f31 	.word	0x08000f31
 8000eac:	08000f71 	.word	0x08000f71
    switch (index){
        case 0:
            //Display the first 7SEG
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eb6:	484e      	ldr	r0, [pc, #312]	; (8000ff0 <update7SEG+0x168>)
 8000eb8:	f000 fed9 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec2:	484b      	ldr	r0, [pc, #300]	; (8000ff0 <update7SEG+0x168>)
 8000ec4:	f000 fed3 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ece:	4848      	ldr	r0, [pc, #288]	; (8000ff0 <update7SEG+0x168>)
 8000ed0:	f000 fecd 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eda:	4845      	ldr	r0, [pc, #276]	; (8000ff0 <update7SEG+0x168>)
 8000edc:	f000 fec7 	bl	8001c6e <HAL_GPIO_WritePin>
        	seven_led_seg_display(led_buffer[index]);
 8000ee0:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <update7SEG+0x16c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fd7f 	bl	80009ec <seven_led_seg_display>
            break;
 8000eee:	e07b      	b.n	8000fe8 <update7SEG+0x160>
        case 1:
            //Display the second 7SEG
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ef6:	483e      	ldr	r0, [pc, #248]	; (8000ff0 <update7SEG+0x168>)
 8000ef8:	f000 feb9 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f02:	483b      	ldr	r0, [pc, #236]	; (8000ff0 <update7SEG+0x168>)
 8000f04:	f000 feb3 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0e:	4838      	ldr	r0, [pc, #224]	; (8000ff0 <update7SEG+0x168>)
 8000f10:	f000 fead 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f1a:	4835      	ldr	r0, [pc, #212]	; (8000ff0 <update7SEG+0x168>)
 8000f1c:	f000 fea7 	bl	8001c6e <HAL_GPIO_WritePin>
        	seven_led_seg_display(led_buffer[index]);
 8000f20:	4a34      	ldr	r2, [pc, #208]	; (8000ff4 <update7SEG+0x16c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fd5f 	bl	80009ec <seven_led_seg_display>
            break;
 8000f2e:	e05b      	b.n	8000fe8 <update7SEG+0x160>
        case 2:
            //Display the third 7SEG
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f30:	2201      	movs	r2, #1
 8000f32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f36:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <update7SEG+0x168>)
 8000f38:	f000 fe99 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f42:	482b      	ldr	r0, [pc, #172]	; (8000ff0 <update7SEG+0x168>)
 8000f44:	f000 fe93 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f4e:	4828      	ldr	r0, [pc, #160]	; (8000ff0 <update7SEG+0x168>)
 8000f50:	f000 fe8d 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f5a:	4825      	ldr	r0, [pc, #148]	; (8000ff0 <update7SEG+0x168>)
 8000f5c:	f000 fe87 	bl	8001c6e <HAL_GPIO_WritePin>
        	seven_led_seg_display(led_buffer[index]);
 8000f60:	4a24      	ldr	r2, [pc, #144]	; (8000ff4 <update7SEG+0x16c>)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fd3f 	bl	80009ec <seven_led_seg_display>
            break;
 8000f6e:	e03b      	b.n	8000fe8 <update7SEG+0x160>
        case 3:
            //Display the forth 7SEG
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 1);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f76:	481e      	ldr	r0, [pc, #120]	; (8000ff0 <update7SEG+0x168>)
 8000f78:	f000 fe79 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 1);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f82:	481b      	ldr	r0, [pc, #108]	; (8000ff0 <update7SEG+0x168>)
 8000f84:	f000 fe73 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 1);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <update7SEG+0x168>)
 8000f90:	f000 fe6d 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f9a:	4815      	ldr	r0, [pc, #84]	; (8000ff0 <update7SEG+0x168>)
 8000f9c:	f000 fe67 	bl	8001c6e <HAL_GPIO_WritePin>
        	seven_led_seg_display(led_buffer[index]);
 8000fa0:	4a14      	ldr	r2, [pc, #80]	; (8000ff4 <update7SEG+0x16c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fd1f 	bl	80009ec <seven_led_seg_display>
            break;
 8000fae:	e01b      	b.n	8000fe8 <update7SEG+0x160>
        default:
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <update7SEG+0x168>)
 8000fb8:	f000 fe59 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc2:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <update7SEG+0x168>)
 8000fc4:	f000 fe53 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fce:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <update7SEG+0x168>)
 8000fd0:	f000 fe4d 	bl	8001c6e <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <update7SEG+0x168>)
 8000fdc:	f000 fe47 	bl	8001c6e <HAL_GPIO_WritePin>
        	seven_led_seg_display(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f7ff fd03 	bl	80009ec <seven_led_seg_display>
            break;
 8000fe6:	bf00      	nop
    }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010800 	.word	0x40010800
 8000ff4:	2000003c 	.word	0x2000003c

08000ff8 <update_buffer>:

void update_buffer(int horizontal, int vertical){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	led_buffer[0]= (horizontal-(horizontal%10))/10;
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	4b25      	ldr	r3, [pc, #148]	; (800109c <update_buffer+0xa4>)
 8001006:	fb83 2301 	smull	r2, r3, r3, r1
 800100a:	109a      	asrs	r2, r3, #2
 800100c:	17cb      	asrs	r3, r1, #31
 800100e:	1ad2      	subs	r2, r2, r3
 8001010:	4613      	mov	r3, r2
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	1aca      	subs	r2, r1, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	1a9b      	subs	r3, r3, r2
 800101e:	4a1f      	ldr	r2, [pc, #124]	; (800109c <update_buffer+0xa4>)
 8001020:	fb82 1203 	smull	r1, r2, r2, r3
 8001024:	1092      	asrs	r2, r2, #2
 8001026:	17db      	asrs	r3, r3, #31
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	4a1d      	ldr	r2, [pc, #116]	; (80010a0 <update_buffer+0xa8>)
 800102c:	6013      	str	r3, [r2, #0]
	led_buffer[1]= horizontal%10;
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	4b1a      	ldr	r3, [pc, #104]	; (800109c <update_buffer+0xa4>)
 8001032:	fb83 2301 	smull	r2, r3, r3, r1
 8001036:	109a      	asrs	r2, r3, #2
 8001038:	17cb      	asrs	r3, r1, #31
 800103a:	1ad2      	subs	r2, r2, r3
 800103c:	4613      	mov	r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4413      	add	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	1aca      	subs	r2, r1, r3
 8001046:	4b16      	ldr	r3, [pc, #88]	; (80010a0 <update_buffer+0xa8>)
 8001048:	605a      	str	r2, [r3, #4]

	led_buffer[2]= (vertical-(vertical%10))/10;
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	4b13      	ldr	r3, [pc, #76]	; (800109c <update_buffer+0xa4>)
 800104e:	fb83 2301 	smull	r2, r3, r3, r1
 8001052:	109a      	asrs	r2, r3, #2
 8001054:	17cb      	asrs	r3, r1, #31
 8001056:	1ad2      	subs	r2, r2, r3
 8001058:	4613      	mov	r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	4413      	add	r3, r2
 800105e:	005b      	lsls	r3, r3, #1
 8001060:	1aca      	subs	r2, r1, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	1a9b      	subs	r3, r3, r2
 8001066:	4a0d      	ldr	r2, [pc, #52]	; (800109c <update_buffer+0xa4>)
 8001068:	fb82 1203 	smull	r1, r2, r2, r3
 800106c:	1092      	asrs	r2, r2, #2
 800106e:	17db      	asrs	r3, r3, #31
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <update_buffer+0xa8>)
 8001074:	6093      	str	r3, [r2, #8]
	led_buffer[3]= vertical%10;
 8001076:	6839      	ldr	r1, [r7, #0]
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <update_buffer+0xa4>)
 800107a:	fb83 2301 	smull	r2, r3, r3, r1
 800107e:	109a      	asrs	r2, r3, #2
 8001080:	17cb      	asrs	r3, r1, #31
 8001082:	1ad2      	subs	r2, r2, r3
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	1aca      	subs	r2, r1, r3
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <update_buffer+0xa8>)
 8001090:	60da      	str	r2, [r3, #12]

}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	66666667 	.word	0x66666667
 80010a0:	2000003c 	.word	0x2000003c

080010a4 <displaying_value>:
int en_index=0;
const int red_timer=RED_TIMER/100;
const int amber_timer=AMBER_TIMER/100;
const int green_timer=GREEN_TIMER/100;

void displaying_value(){
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
	if(timer3_flag==1){
 80010a8:	4b50      	ldr	r3, [pc, #320]	; (80011ec <displaying_value+0x148>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	f040 809a 	bne.w	80011e6 <displaying_value+0x142>
		if(timer2_flag==1){
 80010b2:	4b4f      	ldr	r3, [pc, #316]	; (80011f0 <displaying_value+0x14c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	f040 8083 	bne.w	80011c2 <displaying_value+0x11e>
			setTimer2(100);
 80010bc:	2064      	movs	r0, #100	; 0x64
 80010be:	f000 f8e3 	bl	8001288 <setTimer2>
			update_buffer(horizontal--, vertical--);
 80010c2:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <displaying_value+0x150>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	494a      	ldr	r1, [pc, #296]	; (80011f4 <displaying_value+0x150>)
 80010ca:	600a      	str	r2, [r1, #0]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <displaying_value+0x154>)
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	1e51      	subs	r1, r2, #1
 80010d2:	4849      	ldr	r0, [pc, #292]	; (80011f8 <displaying_value+0x154>)
 80010d4:	6001      	str	r1, [r0, #0]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff ff8d 	bl	8000ff8 <update_buffer>

			if(horizontal<=0){
 80010de:	4b45      	ldr	r3, [pc, #276]	; (80011f4 <displaying_value+0x150>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	dc34      	bgt.n	8001150 <displaying_value+0xac>
				if(red_flag_horizontal){
 80010e6:	4b45      	ldr	r3, [pc, #276]	; (80011fc <displaying_value+0x158>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d00d      	beq.n	800110a <displaying_value+0x66>
					horizontal=green_timer_global;
 80010ee:	4b44      	ldr	r3, [pc, #272]	; (8001200 <displaying_value+0x15c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a40      	ldr	r2, [pc, #256]	; (80011f4 <displaying_value+0x150>)
 80010f4:	6013      	str	r3, [r2, #0]
					red_flag_horizontal=0;
 80010f6:	4b41      	ldr	r3, [pc, #260]	; (80011fc <displaying_value+0x158>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
					amber_flag_horizontal=0;
 80010fc:	4b41      	ldr	r3, [pc, #260]	; (8001204 <displaying_value+0x160>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
					green_flag_horizontal=1;
 8001102:	4b41      	ldr	r3, [pc, #260]	; (8001208 <displaying_value+0x164>)
 8001104:	2201      	movs	r2, #1
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e022      	b.n	8001150 <displaying_value+0xac>

				}else if(amber_flag_horizontal){
 800110a:	4b3e      	ldr	r3, [pc, #248]	; (8001204 <displaying_value+0x160>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d00d      	beq.n	800112e <displaying_value+0x8a>
					horizontal=red_timer_global;
 8001112:	4b3e      	ldr	r3, [pc, #248]	; (800120c <displaying_value+0x168>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a37      	ldr	r2, [pc, #220]	; (80011f4 <displaying_value+0x150>)
 8001118:	6013      	str	r3, [r2, #0]
					red_flag_horizontal=1;
 800111a:	4b38      	ldr	r3, [pc, #224]	; (80011fc <displaying_value+0x158>)
 800111c:	2201      	movs	r2, #1
 800111e:	601a      	str	r2, [r3, #0]
					amber_flag_horizontal=0;
 8001120:	4b38      	ldr	r3, [pc, #224]	; (8001204 <displaying_value+0x160>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
					green_flag_horizontal=0;
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <displaying_value+0x164>)
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	e010      	b.n	8001150 <displaying_value+0xac>

				}else if(green_flag_horizontal){
 800112e:	4b36      	ldr	r3, [pc, #216]	; (8001208 <displaying_value+0x164>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00c      	beq.n	8001150 <displaying_value+0xac>
					horizontal=amber_timer_global;
 8001136:	4b36      	ldr	r3, [pc, #216]	; (8001210 <displaying_value+0x16c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a2e      	ldr	r2, [pc, #184]	; (80011f4 <displaying_value+0x150>)
 800113c:	6013      	str	r3, [r2, #0]
					red_flag_horizontal=0;
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <displaying_value+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
					amber_flag_horizontal=1;
 8001144:	4b2f      	ldr	r3, [pc, #188]	; (8001204 <displaying_value+0x160>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
					green_flag_horizontal=0;
 800114a:	4b2f      	ldr	r3, [pc, #188]	; (8001208 <displaying_value+0x164>)
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]

				}
			}

			if(vertical<=0){
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <displaying_value+0x154>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2b00      	cmp	r3, #0
 8001156:	dc34      	bgt.n	80011c2 <displaying_value+0x11e>
				if(red_flag_vertical){
 8001158:	4b2e      	ldr	r3, [pc, #184]	; (8001214 <displaying_value+0x170>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d00d      	beq.n	800117c <displaying_value+0xd8>
					vertical=green_timer_global;
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <displaying_value+0x15c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <displaying_value+0x154>)
 8001166:	6013      	str	r3, [r2, #0]
					red_flag_vertical=0;
 8001168:	4b2a      	ldr	r3, [pc, #168]	; (8001214 <displaying_value+0x170>)
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
					amber_flag_vertical=0;
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <displaying_value+0x174>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
					green_flag_vertical=1;
 8001174:	4b29      	ldr	r3, [pc, #164]	; (800121c <displaying_value+0x178>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e022      	b.n	80011c2 <displaying_value+0x11e>

				}else if(amber_flag_vertical){
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <displaying_value+0x174>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00d      	beq.n	80011a0 <displaying_value+0xfc>
					vertical=red_timer_global;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <displaying_value+0x168>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <displaying_value+0x154>)
 800118a:	6013      	str	r3, [r2, #0]
					red_flag_vertical=1;
 800118c:	4b21      	ldr	r3, [pc, #132]	; (8001214 <displaying_value+0x170>)
 800118e:	2201      	movs	r2, #1
 8001190:	601a      	str	r2, [r3, #0]
					amber_flag_vertical=0;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <displaying_value+0x174>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
					green_flag_vertical=0;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <displaying_value+0x178>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	e010      	b.n	80011c2 <displaying_value+0x11e>

				}else if(green_flag_vertical){
 80011a0:	4b1e      	ldr	r3, [pc, #120]	; (800121c <displaying_value+0x178>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00c      	beq.n	80011c2 <displaying_value+0x11e>
					vertical=amber_timer_global;
 80011a8:	4b19      	ldr	r3, [pc, #100]	; (8001210 <displaying_value+0x16c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a12      	ldr	r2, [pc, #72]	; (80011f8 <displaying_value+0x154>)
 80011ae:	6013      	str	r3, [r2, #0]
					red_flag_vertical=0;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <displaying_value+0x170>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
					amber_flag_vertical=1;
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <displaying_value+0x174>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
					green_flag_vertical=0;
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <displaying_value+0x178>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]

			}


		}
		update7SEG(en_index++);
 80011c2:	4b17      	ldr	r3, [pc, #92]	; (8001220 <displaying_value+0x17c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	4915      	ldr	r1, [pc, #84]	; (8001220 <displaying_value+0x17c>)
 80011ca:	600a      	str	r2, [r1, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff fe5b 	bl	8000e88 <update7SEG>
		if(en_index>3){
 80011d2:	4b13      	ldr	r3, [pc, #76]	; (8001220 <displaying_value+0x17c>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2b03      	cmp	r3, #3
 80011d8:	dd02      	ble.n	80011e0 <displaying_value+0x13c>
			en_index=0;
 80011da:	4b11      	ldr	r3, [pc, #68]	; (8001220 <displaying_value+0x17c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
		}
		setTimer3(TIMER_INTERRUPT_DURATION);
 80011e0:	2014      	movs	r0, #20
 80011e2:	f000 f865 	bl	80012b0 <setTimer3>

	}

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000d4 	.word	0x200000d4
 80011f0:	200000cc 	.word	0x200000cc
 80011f4:	20000058 	.word	0x20000058
 80011f8:	2000005c 	.word	0x2000005c
 80011fc:	20000034 	.word	0x20000034
 8001200:	20000054 	.word	0x20000054
 8001204:	200000a0 	.word	0x200000a0
 8001208:	200000a4 	.word	0x200000a4
 800120c:	2000004c 	.word	0x2000004c
 8001210:	20000050 	.word	0x20000050
 8001214:	200000a8 	.word	0x200000a8
 8001218:	200000ac 	.word	0x200000ac
 800121c:	20000038 	.word	0x20000038
 8001220:	200000bc 	.word	0x200000bc

08001224 <display_for_mode>:

void display_for_mode(){
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	if(timer3_flag==1){
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <display_for_mode+0x34>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d111      	bne.n	8001254 <display_for_mode+0x30>
		update7SEG(en_index++);
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <display_for_mode+0x38>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	4909      	ldr	r1, [pc, #36]	; (800125c <display_for_mode+0x38>)
 8001238:	600a      	str	r2, [r1, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fe24 	bl	8000e88 <update7SEG>
		if(en_index>3){
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <display_for_mode+0x38>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b03      	cmp	r3, #3
 8001246:	dd02      	ble.n	800124e <display_for_mode+0x2a>
			en_index=0;
 8001248:	4b04      	ldr	r3, [pc, #16]	; (800125c <display_for_mode+0x38>)
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
		}
		setTimer3(TIMER_INTERRUPT_DURATION);
 800124e:	2014      	movs	r0, #20
 8001250:	f000 f82e 	bl	80012b0 <setTimer3>

	}
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200000d4 	.word	0x200000d4
 800125c:	200000bc 	.word	0x200000bc

08001260 <setTimer1>:

#include "software_timer.h"

int timer1_counter=0;
int timer1_flag =0;
void setTimer1(int duration){
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
	timer1_counter= duration;
 8001268:	4a05      	ldr	r2, [pc, #20]	; (8001280 <setTimer1+0x20>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <setTimer1+0x24>)
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200000c0 	.word	0x200000c0
 8001284:	200000c4 	.word	0x200000c4

08001288 <setTimer2>:

int timer2_counter=0;
int timer2_flag =0;
void setTimer2(int duration){
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	timer2_counter= duration;
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <setTimer2+0x20>)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8001296:	4b05      	ldr	r3, [pc, #20]	; (80012ac <setTimer2+0x24>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200000c8 	.word	0x200000c8
 80012ac:	200000cc 	.word	0x200000cc

080012b0 <setTimer3>:

int timer3_counter=0;
int timer3_flag =0;
void setTimer3(int duration){
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	timer3_counter= duration;
 80012b8:	4a05      	ldr	r2, [pc, #20]	; (80012d0 <setTimer3+0x20>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80012be:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <setTimer3+0x24>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	200000d0 	.word	0x200000d0
 80012d4:	200000d4 	.word	0x200000d4

080012d8 <timerRun>:

void timerRun(){
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 80012dc:	4b19      	ldr	r3, [pc, #100]	; (8001344 <timerRun+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	dd0b      	ble.n	80012fc <timerRun+0x24>
		timer1_counter--;
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <timerRun+0x6c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	4a16      	ldr	r2, [pc, #88]	; (8001344 <timerRun+0x6c>)
 80012ec:	6013      	str	r3, [r2, #0]
		if(timer1_counter==0){
 80012ee:	4b15      	ldr	r3, [pc, #84]	; (8001344 <timerRun+0x6c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d102      	bne.n	80012fc <timerRun+0x24>
			timer1_flag=1;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <timerRun+0x70>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer2_counter>0){
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <timerRun+0x74>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd0b      	ble.n	800131c <timerRun+0x44>
		timer2_counter--;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <timerRun+0x74>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a10      	ldr	r2, [pc, #64]	; (800134c <timerRun+0x74>)
 800130c:	6013      	str	r3, [r2, #0]
		if(timer2_counter==0){
 800130e:	4b0f      	ldr	r3, [pc, #60]	; (800134c <timerRun+0x74>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <timerRun+0x44>
			timer2_flag=1;
 8001316:	4b0e      	ldr	r3, [pc, #56]	; (8001350 <timerRun+0x78>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]
		}
	}

	if(timer3_counter>0){
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <timerRun+0x7c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dd0b      	ble.n	800133c <timerRun+0x64>
		timer3_counter--;
 8001324:	4b0b      	ldr	r3, [pc, #44]	; (8001354 <timerRun+0x7c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3b01      	subs	r3, #1
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <timerRun+0x7c>)
 800132c:	6013      	str	r3, [r2, #0]
		if(timer3_counter==0){
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <timerRun+0x7c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <timerRun+0x64>
			timer3_flag=1;
 8001336:	4b08      	ldr	r3, [pc, #32]	; (8001358 <timerRun+0x80>)
 8001338:	2201      	movs	r2, #1
 800133a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr
 8001344:	200000c0 	.word	0x200000c0
 8001348:	200000c4 	.word	0x200000c4
 800134c:	200000c8 	.word	0x200000c8
 8001350:	200000cc 	.word	0x200000cc
 8001354:	200000d0 	.word	0x200000d0
 8001358:	200000d4 	.word	0x200000d4

0800135c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001362:	4b15      	ldr	r3, [pc, #84]	; (80013b8 <HAL_MspInit+0x5c>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	4a14      	ldr	r2, [pc, #80]	; (80013b8 <HAL_MspInit+0x5c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6193      	str	r3, [r2, #24]
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_MspInit+0x5c>)
 8001370:	699b      	ldr	r3, [r3, #24]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_MspInit+0x5c>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	4a0e      	ldr	r2, [pc, #56]	; (80013b8 <HAL_MspInit+0x5c>)
 8001380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001384:	61d3      	str	r3, [r2, #28]
 8001386:	4b0c      	ldr	r3, [pc, #48]	; (80013b8 <HAL_MspInit+0x5c>)
 8001388:	69db      	ldr	r3, [r3, #28]
 800138a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800138e:	607b      	str	r3, [r7, #4]
 8001390:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_MspInit+0x60>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_MspInit+0x60>)
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	40021000 	.word	0x40021000
 80013bc:	40010000 	.word	0x40010000

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013d0:	d113      	bne.n	80013fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	61d3      	str	r3, [r2, #28]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_TIM_Base_MspInit+0x44>)
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	201c      	movs	r0, #28
 80013f0:	f000 fa75 	bl	80018de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80013f4:	201c      	movs	r0, #28
 80013f6:	f000 fa8e 	bl	8001916 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40021000 	.word	0x40021000

08001408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800140c:	e7fe      	b.n	800140c <NMI_Handler+0x4>

0800140e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001412:	e7fe      	b.n	8001412 <HardFault_Handler+0x4>

08001414 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001418:	e7fe      	b.n	8001418 <MemManage_Handler+0x4>

0800141a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141e:	e7fe      	b.n	800141e <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <UsageFault_Handler+0x4>

08001426 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	46bd      	mov	sp, r7
 8001446:	bc80      	pop	{r7}
 8001448:	4770      	bx	lr

0800144a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144e:	f000 f953 	bl	80016f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
	...

08001458 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800145c:	4802      	ldr	r0, [pc, #8]	; (8001468 <TIM2_IRQHandler+0x10>)
 800145e:	f001 f8a3 	bl	80025a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200000d8 	.word	0x200000d8

0800146c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr

08001478 <trafic_light_run>:
 *  Created on: Nov 1, 2022
 *      Author: PC
 */
#include "trafic_ligh.h"

void trafic_light_run(){
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	displaying_value();
 800147c:	f7ff fe12 	bl	80010a4 <displaying_value>
	switch(status_led_horizontal){
 8001480:	4b5e      	ldr	r3, [pc, #376]	; (80015fc <trafic_light_run+0x184>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b20      	cmp	r3, #32
 8001486:	d03c      	beq.n	8001502 <trafic_light_run+0x8a>
 8001488:	2b20      	cmp	r3, #32
 800148a:	dc51      	bgt.n	8001530 <trafic_light_run+0xb8>
 800148c:	2b1f      	cmp	r3, #31
 800148e:	d021      	beq.n	80014d4 <trafic_light_run+0x5c>
 8001490:	2b1f      	cmp	r3, #31
 8001492:	dc4d      	bgt.n	8001530 <trafic_light_run+0xb8>
 8001494:	2b00      	cmp	r3, #0
 8001496:	d002      	beq.n	800149e <trafic_light_run+0x26>
 8001498:	2b1e      	cmp	r3, #30
 800149a:	d004      	beq.n	80014a6 <trafic_light_run+0x2e>
			HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, SET);
			HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, RESET);
			break;
		default:
			break;
 800149c:	e048      	b.n	8001530 <trafic_light_run+0xb8>
			status_led_horizontal = RED;
 800149e:	4b57      	ldr	r3, [pc, #348]	; (80015fc <trafic_light_run+0x184>)
 80014a0:	221e      	movs	r2, #30
 80014a2:	601a      	str	r2, [r3, #0]
			break;
 80014a4:	e045      	b.n	8001532 <trafic_light_run+0xba>
			if(green_flag_horizontal==1){
 80014a6:	4b56      	ldr	r3, [pc, #344]	; (8001600 <trafic_light_run+0x188>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d102      	bne.n	80014b4 <trafic_light_run+0x3c>
				status_led_horizontal=GREEN;
 80014ae:	4b53      	ldr	r3, [pc, #332]	; (80015fc <trafic_light_run+0x184>)
 80014b0:	2220      	movs	r2, #32
 80014b2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, RESET);
 80014b4:	2200      	movs	r2, #0
 80014b6:	2120      	movs	r1, #32
 80014b8:	4852      	ldr	r0, [pc, #328]	; (8001604 <trafic_light_run+0x18c>)
 80014ba:	f000 fbd8 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, SET);
 80014be:	2201      	movs	r2, #1
 80014c0:	2140      	movs	r1, #64	; 0x40
 80014c2:	4850      	ldr	r0, [pc, #320]	; (8001604 <trafic_light_run+0x18c>)
 80014c4:	f000 fbd3 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2180      	movs	r1, #128	; 0x80
 80014cc:	484d      	ldr	r0, [pc, #308]	; (8001604 <trafic_light_run+0x18c>)
 80014ce:	f000 fbce 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80014d2:	e02e      	b.n	8001532 <trafic_light_run+0xba>
			if(red_flag_horizontal==1){
 80014d4:	4b4c      	ldr	r3, [pc, #304]	; (8001608 <trafic_light_run+0x190>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d102      	bne.n	80014e2 <trafic_light_run+0x6a>
				status_led_horizontal=RED;
 80014dc:	4b47      	ldr	r3, [pc, #284]	; (80015fc <trafic_light_run+0x184>)
 80014de:	221e      	movs	r2, #30
 80014e0:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2120      	movs	r1, #32
 80014e6:	4847      	ldr	r0, [pc, #284]	; (8001604 <trafic_light_run+0x18c>)
 80014e8:	f000 fbc1 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2140      	movs	r1, #64	; 0x40
 80014f0:	4844      	ldr	r0, [pc, #272]	; (8001604 <trafic_light_run+0x18c>)
 80014f2:	f000 fbbc 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, SET);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2180      	movs	r1, #128	; 0x80
 80014fa:	4842      	ldr	r0, [pc, #264]	; (8001604 <trafic_light_run+0x18c>)
 80014fc:	f000 fbb7 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 8001500:	e017      	b.n	8001532 <trafic_light_run+0xba>
			if(amber_flag_horizontal==1){
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <trafic_light_run+0x194>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d102      	bne.n	8001510 <trafic_light_run+0x98>
				status_led_horizontal=AMBER;
 800150a:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <trafic_light_run+0x184>)
 800150c:	221f      	movs	r2, #31
 800150e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_HORIZONTAL_GPIO_Port, LED_RED_HORIZONTAL_Pin, SET);
 8001510:	2201      	movs	r2, #1
 8001512:	2120      	movs	r1, #32
 8001514:	483b      	ldr	r0, [pc, #236]	; (8001604 <trafic_light_run+0x18c>)
 8001516:	f000 fbaa 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_HORIZONTAL_GPIO_Port, LED_AMBER_HORIZONTAL_Pin, SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	4839      	ldr	r0, [pc, #228]	; (8001604 <trafic_light_run+0x18c>)
 8001520:	f000 fba5 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_HORIZONTAL_GPIO_Port, LED_GREEN_HORIZONTAL_Pin, RESET);
 8001524:	2200      	movs	r2, #0
 8001526:	2180      	movs	r1, #128	; 0x80
 8001528:	4836      	ldr	r0, [pc, #216]	; (8001604 <trafic_light_run+0x18c>)
 800152a:	f000 fba0 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 800152e:	e000      	b.n	8001532 <trafic_light_run+0xba>
			break;
 8001530:	bf00      	nop
	}
	switch(status_led_vertical){
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <trafic_light_run+0x198>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	2b20      	cmp	r3, #32
 8001538:	d042      	beq.n	80015c0 <trafic_light_run+0x148>
 800153a:	2b20      	cmp	r3, #32
 800153c:	dc5a      	bgt.n	80015f4 <trafic_light_run+0x17c>
 800153e:	2b1f      	cmp	r3, #31
 8001540:	d024      	beq.n	800158c <trafic_light_run+0x114>
 8001542:	2b1f      	cmp	r3, #31
 8001544:	dc56      	bgt.n	80015f4 <trafic_light_run+0x17c>
 8001546:	2b00      	cmp	r3, #0
 8001548:	d002      	beq.n	8001550 <trafic_light_run+0xd8>
 800154a:	2b1e      	cmp	r3, #30
 800154c:	d004      	beq.n	8001558 <trafic_light_run+0xe0>
			HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, SET);
			HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, SET);
			HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, RESET);
			break;
		default:
			break;
 800154e:	e051      	b.n	80015f4 <trafic_light_run+0x17c>
			status_led_vertical = RED;
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <trafic_light_run+0x198>)
 8001552:	221e      	movs	r2, #30
 8001554:	601a      	str	r2, [r3, #0]
			break;
 8001556:	e04e      	b.n	80015f6 <trafic_light_run+0x17e>
			if(green_flag_vertical==1){
 8001558:	4b2e      	ldr	r3, [pc, #184]	; (8001614 <trafic_light_run+0x19c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d102      	bne.n	8001566 <trafic_light_run+0xee>
				status_led_vertical=GREEN;
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <trafic_light_run+0x198>)
 8001562:	2220      	movs	r2, #32
 8001564:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156c:	4825      	ldr	r0, [pc, #148]	; (8001604 <trafic_light_run+0x18c>)
 800156e:	f000 fb7e 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <trafic_light_run+0x18c>)
 800157a:	f000 fb78 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, SET);
 800157e:	2201      	movs	r2, #1
 8001580:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001584:	481f      	ldr	r0, [pc, #124]	; (8001604 <trafic_light_run+0x18c>)
 8001586:	f000 fb72 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 800158a:	e034      	b.n	80015f6 <trafic_light_run+0x17e>
			if(red_flag_vertical==1){
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <trafic_light_run+0x1a0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d102      	bne.n	800159a <trafic_light_run+0x122>
				status_led_vertical=RED;
 8001594:	4b1e      	ldr	r3, [pc, #120]	; (8001610 <trafic_light_run+0x198>)
 8001596:	221e      	movs	r2, #30
 8001598:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, SET);
 800159a:	2201      	movs	r2, #1
 800159c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015a0:	4818      	ldr	r0, [pc, #96]	; (8001604 <trafic_light_run+0x18c>)
 80015a2:	f000 fb64 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, RESET);
 80015a6:	2200      	movs	r2, #0
 80015a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <trafic_light_run+0x18c>)
 80015ae:	f000 fb5e 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, SET);
 80015b2:	2201      	movs	r2, #1
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	4812      	ldr	r0, [pc, #72]	; (8001604 <trafic_light_run+0x18c>)
 80015ba:	f000 fb58 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80015be:	e01a      	b.n	80015f6 <trafic_light_run+0x17e>
			if(amber_flag_vertical==1){
 80015c0:	4b16      	ldr	r3, [pc, #88]	; (800161c <trafic_light_run+0x1a4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d102      	bne.n	80015ce <trafic_light_run+0x156>
				status_led_vertical=AMBER;
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <trafic_light_run+0x198>)
 80015ca:	221f      	movs	r2, #31
 80015cc:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(LED_RED_VERTICAL_GPIO_Port, LED_RED_VERTICAL_Pin, SET);
 80015ce:	2201      	movs	r2, #1
 80015d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015d4:	480b      	ldr	r0, [pc, #44]	; (8001604 <trafic_light_run+0x18c>)
 80015d6:	f000 fb4a 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_AMBER_VERTICAL_GPIO_Port, LED_AMBER_VERTICAL_Pin, SET);
 80015da:	2201      	movs	r2, #1
 80015dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <trafic_light_run+0x18c>)
 80015e2:	f000 fb44 	bl	8001c6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_VERTICAL_GPIO_Port, LED_GREEN_VERTICAL_Pin, RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ec:	4805      	ldr	r0, [pc, #20]	; (8001604 <trafic_light_run+0x18c>)
 80015ee:	f000 fb3e 	bl	8001c6e <HAL_GPIO_WritePin>
			break;
 80015f2:	e000      	b.n	80015f6 <trafic_light_run+0x17e>
			break;
 80015f4:	bf00      	nop
	}
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000098 	.word	0x20000098
 8001600:	200000a4 	.word	0x200000a4
 8001604:	40010800 	.word	0x40010800
 8001608:	20000034 	.word	0x20000034
 800160c:	200000a0 	.word	0x200000a0
 8001610:	2000009c 	.word	0x2000009c
 8001614:	20000038 	.word	0x20000038
 8001618:	200000a8 	.word	0x200000a8
 800161c:	200000ac 	.word	0x200000ac

08001620 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	; (8001654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	; (8001658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	; (800165c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	; (8001660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	; (8001664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001646:	f7ff ff11 	bl	800146c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800164a:	f001 faf5 	bl	8002c38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800164e:	f7fe fe8f 	bl	8000370 <main>
  bx lr
 8001652:	4770      	bx	lr
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800165c:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8001660:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001664:	20000124 	.word	0x20000124

08001668 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC1_2_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001670:	4b08      	ldr	r3, [pc, #32]	; (8001694 <HAL_Init+0x28>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a07      	ldr	r2, [pc, #28]	; (8001694 <HAL_Init+0x28>)
 8001676:	f043 0310 	orr.w	r3, r3, #16
 800167a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800167c:	2003      	movs	r0, #3
 800167e:	f000 f923 	bl	80018c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001682:	200f      	movs	r0, #15
 8001684:	f000 f808 	bl	8001698 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001688:	f7ff fe68 	bl	800135c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40022000 	.word	0x40022000

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016a0:	4b12      	ldr	r3, [pc, #72]	; (80016ec <HAL_InitTick+0x54>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <HAL_InitTick+0x58>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f93b 	bl	8001932 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00e      	b.n	80016e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b0f      	cmp	r3, #15
 80016ca:	d80a      	bhi.n	80016e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016cc:	2200      	movs	r2, #0
 80016ce:	6879      	ldr	r1, [r7, #4]
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f000 f903 	bl	80018de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016d8:	4a06      	ldr	r2, [pc, #24]	; (80016f4 <HAL_InitTick+0x5c>)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016de:	2300      	movs	r3, #0
 80016e0:	e000      	b.n	80016e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000060 	.word	0x20000060
 80016f0:	20000068 	.word	0x20000068
 80016f4:	20000064 	.word	0x20000064

080016f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_IncTick+0x1c>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_IncTick+0x20>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4413      	add	r3, r2
 8001708:	4a03      	ldr	r2, [pc, #12]	; (8001718 <HAL_IncTick+0x20>)
 800170a:	6013      	str	r3, [r2, #0]
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000068 	.word	0x20000068
 8001718:	20000120 	.word	0x20000120

0800171c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  return uwTick;
 8001720:	4b02      	ldr	r3, [pc, #8]	; (800172c <HAL_GetTick+0x10>)
 8001722:	681b      	ldr	r3, [r3, #0]
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr
 800172c:	20000120 	.word	0x20000120

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bc80      	pop	{r7}
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4906      	ldr	r1, [pc, #24]	; (80017c8 <__NVIC_EnableIRQ+0x34>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr
 80017c8:	e000e100 	.word	0xe000e100

080017cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	db0a      	blt.n	80017f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	490c      	ldr	r1, [pc, #48]	; (8001818 <__NVIC_SetPriority+0x4c>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	0112      	lsls	r2, r2, #4
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	440b      	add	r3, r1
 80017f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f4:	e00a      	b.n	800180c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	b2da      	uxtb	r2, r3
 80017fa:	4908      	ldr	r1, [pc, #32]	; (800181c <__NVIC_SetPriority+0x50>)
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	3b04      	subs	r3, #4
 8001804:	0112      	lsls	r2, r2, #4
 8001806:	b2d2      	uxtb	r2, r2
 8001808:	440b      	add	r3, r1
 800180a:	761a      	strb	r2, [r3, #24]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	e000e100 	.word	0xe000e100
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	60f8      	str	r0, [r7, #12]
 8001828:	60b9      	str	r1, [r7, #8]
 800182a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f1c3 0307 	rsb	r3, r3, #7
 800183a:	2b04      	cmp	r3, #4
 800183c:	bf28      	it	cs
 800183e:	2304      	movcs	r3, #4
 8001840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	3304      	adds	r3, #4
 8001846:	2b06      	cmp	r3, #6
 8001848:	d902      	bls.n	8001850 <NVIC_EncodePriority+0x30>
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	3b03      	subs	r3, #3
 800184e:	e000      	b.n	8001852 <NVIC_EncodePriority+0x32>
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	f04f 32ff 	mov.w	r2, #4294967295
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43da      	mvns	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	401a      	ands	r2, r3
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	fa01 f303 	lsl.w	r3, r1, r3
 8001872:	43d9      	mvns	r1, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001878:	4313      	orrs	r3, r2
         );
}
 800187a:	4618      	mov	r0, r3
 800187c:	3724      	adds	r7, #36	; 0x24
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	3b01      	subs	r3, #1
 8001890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001894:	d301      	bcc.n	800189a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001896:	2301      	movs	r3, #1
 8001898:	e00f      	b.n	80018ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <SysTick_Config+0x40>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3b01      	subs	r3, #1
 80018a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018a2:	210f      	movs	r1, #15
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295
 80018a8:	f7ff ff90 	bl	80017cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018ac:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <SysTick_Config+0x40>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018b2:	4b04      	ldr	r3, [pc, #16]	; (80018c4 <SysTick_Config+0x40>)
 80018b4:	2207      	movs	r2, #7
 80018b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	e000e010 	.word	0xe000e010

080018c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff ff2d 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f0:	f7ff ff42 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	68b9      	ldr	r1, [r7, #8]
 80018fa:	6978      	ldr	r0, [r7, #20]
 80018fc:	f7ff ff90 	bl	8001820 <NVIC_EncodePriority>
 8001900:	4602      	mov	r2, r0
 8001902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff ff5f 	bl	80017cc <__NVIC_SetPriority>
}
 800190e:	bf00      	nop
 8001910:	3718      	adds	r7, #24
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff35 	bl	8001794 <__NVIC_EnableIRQ>
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b082      	sub	sp, #8
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f7ff ffa2 	bl	8001884 <SysTick_Config>
 8001940:	4603      	mov	r3, r0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800194c:	b480      	push	{r7}
 800194e:	b08b      	sub	sp, #44	; 0x2c
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800195a:	2300      	movs	r3, #0
 800195c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800195e:	e148      	b.n	8001bf2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001960:	2201      	movs	r2, #1
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	69fa      	ldr	r2, [r7, #28]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	429a      	cmp	r2, r3
 800197a:	f040 8137 	bne.w	8001bec <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	4aa3      	ldr	r2, [pc, #652]	; (8001c10 <HAL_GPIO_Init+0x2c4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d05e      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001988:	4aa1      	ldr	r2, [pc, #644]	; (8001c10 <HAL_GPIO_Init+0x2c4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d875      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800198e:	4aa1      	ldr	r2, [pc, #644]	; (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d058      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 8001994:	4a9f      	ldr	r2, [pc, #636]	; (8001c14 <HAL_GPIO_Init+0x2c8>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d86f      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 800199a:	4a9f      	ldr	r2, [pc, #636]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d052      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019a0:	4a9d      	ldr	r2, [pc, #628]	; (8001c18 <HAL_GPIO_Init+0x2cc>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d869      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019a6:	4a9d      	ldr	r2, [pc, #628]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d04c      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019ac:	4a9b      	ldr	r2, [pc, #620]	; (8001c1c <HAL_GPIO_Init+0x2d0>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d863      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019b2:	4a9b      	ldr	r2, [pc, #620]	; (8001c20 <HAL_GPIO_Init+0x2d4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d046      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
 80019b8:	4a99      	ldr	r2, [pc, #612]	; (8001c20 <HAL_GPIO_Init+0x2d4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d85d      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019be:	2b12      	cmp	r3, #18
 80019c0:	d82a      	bhi.n	8001a18 <HAL_GPIO_Init+0xcc>
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d859      	bhi.n	8001a7a <HAL_GPIO_Init+0x12e>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <HAL_GPIO_Init+0x80>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	08001a47 	.word	0x08001a47
 80019d0:	08001a21 	.word	0x08001a21
 80019d4:	08001a33 	.word	0x08001a33
 80019d8:	08001a75 	.word	0x08001a75
 80019dc:	08001a7b 	.word	0x08001a7b
 80019e0:	08001a7b 	.word	0x08001a7b
 80019e4:	08001a7b 	.word	0x08001a7b
 80019e8:	08001a7b 	.word	0x08001a7b
 80019ec:	08001a7b 	.word	0x08001a7b
 80019f0:	08001a7b 	.word	0x08001a7b
 80019f4:	08001a7b 	.word	0x08001a7b
 80019f8:	08001a7b 	.word	0x08001a7b
 80019fc:	08001a7b 	.word	0x08001a7b
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a7b 	.word	0x08001a7b
 8001a08:	08001a7b 	.word	0x08001a7b
 8001a0c:	08001a7b 	.word	0x08001a7b
 8001a10:	08001a29 	.word	0x08001a29
 8001a14:	08001a3d 	.word	0x08001a3d
 8001a18:	4a82      	ldr	r2, [pc, #520]	; (8001c24 <HAL_GPIO_Init+0x2d8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a1e:	e02c      	b.n	8001a7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	623b      	str	r3, [r7, #32]
          break;
 8001a26:	e029      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	623b      	str	r3, [r7, #32]
          break;
 8001a30:	e024      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	3308      	adds	r3, #8
 8001a38:	623b      	str	r3, [r7, #32]
          break;
 8001a3a:	e01f      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	330c      	adds	r3, #12
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	e01a      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a4e:	2304      	movs	r3, #4
 8001a50:	623b      	str	r3, [r7, #32]
          break;
 8001a52:	e013      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d105      	bne.n	8001a68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a5c:	2308      	movs	r3, #8
 8001a5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	611a      	str	r2, [r3, #16]
          break;
 8001a66:	e009      	b.n	8001a7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a68:	2308      	movs	r3, #8
 8001a6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69fa      	ldr	r2, [r7, #28]
 8001a70:	615a      	str	r2, [r3, #20]
          break;
 8001a72:	e003      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e000      	b.n	8001a7c <HAL_GPIO_Init+0x130>
          break;
 8001a7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a7c:	69bb      	ldr	r3, [r7, #24]
 8001a7e:	2bff      	cmp	r3, #255	; 0xff
 8001a80:	d801      	bhi.n	8001a86 <HAL_GPIO_Init+0x13a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	e001      	b.n	8001a8a <HAL_GPIO_Init+0x13e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	2bff      	cmp	r3, #255	; 0xff
 8001a90:	d802      	bhi.n	8001a98 <HAL_GPIO_Init+0x14c>
 8001a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x152>
 8001a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9a:	3b08      	subs	r3, #8
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	210f      	movs	r1, #15
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	43db      	mvns	r3, r3
 8001aae:	401a      	ands	r2, r3
 8001ab0:	6a39      	ldr	r1, [r7, #32]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab8:	431a      	orrs	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 8090 	beq.w	8001bec <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001acc:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a55      	ldr	r2, [pc, #340]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b53      	ldr	r3, [pc, #332]	; (8001c28 <HAL_GPIO_Init+0x2dc>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a49      	ldr	r2, [pc, #292]	; (8001c30 <HAL_GPIO_Init+0x2e4>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d00d      	beq.n	8001b2c <HAL_GPIO_Init+0x1e0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a48      	ldr	r2, [pc, #288]	; (8001c34 <HAL_GPIO_Init+0x2e8>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d007      	beq.n	8001b28 <HAL_GPIO_Init+0x1dc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a47      	ldr	r2, [pc, #284]	; (8001c38 <HAL_GPIO_Init+0x2ec>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d101      	bne.n	8001b24 <HAL_GPIO_Init+0x1d8>
 8001b20:	2302      	movs	r3, #2
 8001b22:	e004      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b24:	2303      	movs	r3, #3
 8001b26:	e002      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <HAL_GPIO_Init+0x1e2>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	0092      	lsls	r2, r2, #2
 8001b36:	4093      	lsls	r3, r2
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b3e:	493b      	ldr	r1, [pc, #236]	; (8001c2c <HAL_GPIO_Init+0x2e0>)
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	089b      	lsrs	r3, r3, #2
 8001b44:	3302      	adds	r3, #2
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d006      	beq.n	8001b66 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	4937      	ldr	r1, [pc, #220]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	600b      	str	r3, [r1, #0]
 8001b64:	e006      	b.n	8001b74 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b66:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	4933      	ldr	r1, [pc, #204]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d006      	beq.n	8001b8e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	492d      	ldr	r1, [pc, #180]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	604b      	str	r3, [r1, #4]
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	4929      	ldr	r1, [pc, #164]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d006      	beq.n	8001bb6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ba8:	4b24      	ldr	r3, [pc, #144]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001baa:	689a      	ldr	r2, [r3, #8]
 8001bac:	4923      	ldr	r1, [pc, #140]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	608b      	str	r3, [r1, #8]
 8001bb4:	e006      	b.n	8001bc4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bb6:	4b21      	ldr	r3, [pc, #132]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bb8:	689a      	ldr	r2, [r3, #8]
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	491f      	ldr	r1, [pc, #124]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d006      	beq.n	8001bde <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4919      	ldr	r1, [pc, #100]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001be0:	68da      	ldr	r2, [r3, #12]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4915      	ldr	r1, [pc, #84]	; (8001c3c <HAL_GPIO_Init+0x2f0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	3301      	adds	r3, #1
 8001bf0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f47f aeaf 	bne.w	8001960 <HAL_GPIO_Init+0x14>
  }
}
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	372c      	adds	r7, #44	; 0x2c
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	10320000 	.word	0x10320000
 8001c14:	10310000 	.word	0x10310000
 8001c18:	10220000 	.word	0x10220000
 8001c1c:	10210000 	.word	0x10210000
 8001c20:	10120000 	.word	0x10120000
 8001c24:	10110000 	.word	0x10110000
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	40010800 	.word	0x40010800
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	460b      	mov	r3, r1
 8001c4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	887b      	ldrh	r3, [r7, #2]
 8001c52:	4013      	ands	r3, r2
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d002      	beq.n	8001c5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
 8001c5c:	e001      	b.n	8001c62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	460b      	mov	r3, r1
 8001c78:	807b      	strh	r3, [r7, #2]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c7e:	787b      	ldrb	r3, [r7, #1]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c84:	887a      	ldrh	r2, [r7, #2]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c8a:	e003      	b.n	8001c94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	041a      	lsls	r2, r3, #16
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e26c      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f000 8087 	beq.w	8001dce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc0:	4b92      	ldr	r3, [pc, #584]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	d00c      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ccc:	4b8f      	ldr	r3, [pc, #572]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d112      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
 8001cd8:	4b8c      	ldr	r3, [pc, #560]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce4:	d10b      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4b89      	ldr	r3, [pc, #548]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d06c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x12c>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d168      	bne.n	8001dcc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e246      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d06:	d106      	bne.n	8001d16 <HAL_RCC_OscConfig+0x76>
 8001d08:	4b80      	ldr	r3, [pc, #512]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a7f      	ldr	r2, [pc, #508]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	e02e      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d10c      	bne.n	8001d38 <HAL_RCC_OscConfig+0x98>
 8001d1e:	4b7b      	ldr	r3, [pc, #492]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a7a      	ldr	r2, [pc, #488]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	4b78      	ldr	r3, [pc, #480]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a77      	ldr	r2, [pc, #476]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d34:	6013      	str	r3, [r2, #0]
 8001d36:	e01d      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d40:	d10c      	bne.n	8001d5c <HAL_RCC_OscConfig+0xbc>
 8001d42:	4b72      	ldr	r3, [pc, #456]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a71      	ldr	r2, [pc, #452]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e00b      	b.n	8001d74 <HAL_RCC_OscConfig+0xd4>
 8001d5c:	4b6b      	ldr	r3, [pc, #428]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a6a      	ldr	r2, [pc, #424]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d66:	6013      	str	r3, [r2, #0]
 8001d68:	4b68      	ldr	r3, [pc, #416]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a67      	ldr	r2, [pc, #412]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d72:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7c:	f7ff fcce 	bl	800171c <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fcca 	bl	800171c <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	; 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1fa      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d96:	4b5d      	ldr	r3, [pc, #372]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f0      	beq.n	8001d84 <HAL_RCC_OscConfig+0xe4>
 8001da2:	e014      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fcba 	bl	800171c <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dac:	f7ff fcb6 	bl	800171c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b64      	cmp	r3, #100	; 0x64
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e1e6      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbe:	4b53      	ldr	r3, [pc, #332]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x10c>
 8001dca:	e000      	b.n	8001dce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d063      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dda:	4b4c      	ldr	r3, [pc, #304]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00b      	beq.n	8001dfe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001de6:	4b49      	ldr	r3, [pc, #292]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d11c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
 8001df2:	4b46      	ldr	r3, [pc, #280]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d116      	bne.n	8001e2c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	4b43      	ldr	r3, [pc, #268]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d001      	beq.n	8001e16 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e1ba      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e16:	4b3d      	ldr	r3, [pc, #244]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	00db      	lsls	r3, r3, #3
 8001e24:	4939      	ldr	r1, [pc, #228]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	e03a      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3a:	f7ff fc6f 	bl	800171c <HAL_GetTick>
 8001e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e40:	e008      	b.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e42:	f7ff fc6b 	bl	800171c <HAL_GetTick>
 8001e46:	4602      	mov	r2, r0
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e19b      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e54:	4b2d      	ldr	r3, [pc, #180]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0f0      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e60:	4b2a      	ldr	r3, [pc, #168]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4927      	ldr	r1, [pc, #156]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e70:	4313      	orrs	r3, r2
 8001e72:	600b      	str	r3, [r1, #0]
 8001e74:	e015      	b.n	8001ea2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCC_OscConfig+0x270>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fc4e 	bl	800171c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc4a 	bl	800171c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e17a      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d03a      	beq.n	8001f24 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	699b      	ldr	r3, [r3, #24]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d019      	beq.n	8001eea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	2201      	movs	r2, #1
 8001eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fc2e 	bl	800171c <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec4:	f7ff fc2a 	bl	800171c <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e15a      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f000 faa6 	bl	8002434 <RCC_Delay>
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eea:	4b0a      	ldr	r3, [pc, #40]	; (8001f14 <HAL_RCC_OscConfig+0x274>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff fc14 	bl	800171c <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef6:	e00f      	b.n	8001f18 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7ff fc10 	bl	800171c <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d908      	bls.n	8001f18 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e140      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	42420000 	.word	0x42420000
 8001f14:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	4b9e      	ldr	r3, [pc, #632]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1e9      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f000 80a6 	beq.w	800207e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f36:	4b97      	ldr	r3, [pc, #604]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10d      	bne.n	8001f5e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f42:	4b94      	ldr	r3, [pc, #592]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	4a93      	ldr	r2, [pc, #588]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4c:	61d3      	str	r3, [r2, #28]
 8001f4e:	4b91      	ldr	r3, [pc, #580]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f56:	60bb      	str	r3, [r7, #8]
 8001f58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5e:	4b8e      	ldr	r3, [pc, #568]	; (8002198 <HAL_RCC_OscConfig+0x4f8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d118      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f6a:	4b8b      	ldr	r3, [pc, #556]	; (8002198 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a8a      	ldr	r2, [pc, #552]	; (8002198 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f76:	f7ff fbd1 	bl	800171c <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f7e:	f7ff fbcd 	bl	800171c <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b64      	cmp	r3, #100	; 0x64
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e0fd      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f90:	4b81      	ldr	r3, [pc, #516]	; (8002198 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d106      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x312>
 8001fa4:	4b7b      	ldr	r3, [pc, #492]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4a7a      	ldr	r2, [pc, #488]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6213      	str	r3, [r2, #32]
 8001fb0:	e02d      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x334>
 8001fba:	4b76      	ldr	r3, [pc, #472]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4a75      	ldr	r2, [pc, #468]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	6213      	str	r3, [r2, #32]
 8001fc6:	4b73      	ldr	r3, [pc, #460]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	4a72      	ldr	r2, [pc, #456]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fcc:	f023 0304 	bic.w	r3, r3, #4
 8001fd0:	6213      	str	r3, [r2, #32]
 8001fd2:	e01c      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b05      	cmp	r3, #5
 8001fda:	d10c      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x356>
 8001fdc:	4b6d      	ldr	r3, [pc, #436]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	4a6c      	ldr	r2, [pc, #432]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6213      	str	r3, [r2, #32]
 8001fe8:	4b6a      	ldr	r3, [pc, #424]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	4a69      	ldr	r2, [pc, #420]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001fee:	f043 0301 	orr.w	r3, r3, #1
 8001ff2:	6213      	str	r3, [r2, #32]
 8001ff4:	e00b      	b.n	800200e <HAL_RCC_OscConfig+0x36e>
 8001ff6:	4b67      	ldr	r3, [pc, #412]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	4a66      	ldr	r2, [pc, #408]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	f023 0301 	bic.w	r3, r3, #1
 8002000:	6213      	str	r3, [r2, #32]
 8002002:	4b64      	ldr	r3, [pc, #400]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002004:	6a1b      	ldr	r3, [r3, #32]
 8002006:	4a63      	ldr	r2, [pc, #396]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002008:	f023 0304 	bic.w	r3, r3, #4
 800200c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d015      	beq.n	8002042 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002016:	f7ff fb81 	bl	800171c <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff fb7d 	bl	800171c <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	; 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e0ab      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002034:	4b57      	ldr	r3, [pc, #348]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0ee      	beq.n	800201e <HAL_RCC_OscConfig+0x37e>
 8002040:	e014      	b.n	800206c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002042:	f7ff fb6b 	bl	800171c <HAL_GetTick>
 8002046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002048:	e00a      	b.n	8002060 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800204a:	f7ff fb67 	bl	800171c <HAL_GetTick>
 800204e:	4602      	mov	r2, r0
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	f241 3288 	movw	r2, #5000	; 0x1388
 8002058:	4293      	cmp	r3, r2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e095      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002060:	4b4c      	ldr	r3, [pc, #304]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1ee      	bne.n	800204a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800206c:	7dfb      	ldrb	r3, [r7, #23]
 800206e:	2b01      	cmp	r3, #1
 8002070:	d105      	bne.n	800207e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002072:	4b48      	ldr	r3, [pc, #288]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002074:	69db      	ldr	r3, [r3, #28]
 8002076:	4a47      	ldr	r2, [pc, #284]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800207c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 8081 	beq.w	800218a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002088:	4b42      	ldr	r3, [pc, #264]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d061      	beq.n	8002158 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b02      	cmp	r3, #2
 800209a:	d146      	bne.n	800212a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800209c:	4b3f      	ldr	r3, [pc, #252]	; (800219c <HAL_RCC_OscConfig+0x4fc>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a2:	f7ff fb3b 	bl	800171c <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020aa:	f7ff fb37 	bl	800171c <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e067      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	4b35      	ldr	r3, [pc, #212]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020d0:	d108      	bne.n	80020e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020d2:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	492d      	ldr	r1, [pc, #180]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 80020e0:	4313      	orrs	r3, r2
 80020e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e4:	4b2b      	ldr	r3, [pc, #172]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a19      	ldr	r1, [r3, #32]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	430b      	orrs	r3, r1
 80020f6:	4927      	ldr	r1, [pc, #156]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020fc:	4b27      	ldr	r3, [pc, #156]	; (800219c <HAL_RCC_OscConfig+0x4fc>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7ff fb0b 	bl	800171c <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210a:	f7ff fb07 	bl	800171c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e037      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800211c:	4b1d      	ldr	r3, [pc, #116]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x46a>
 8002128:	e02f      	b.n	800218a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212a:	4b1c      	ldr	r3, [pc, #112]	; (800219c <HAL_RCC_OscConfig+0x4fc>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002130:	f7ff faf4 	bl	800171c <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002138:	f7ff faf0 	bl	800171c <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e020      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214a:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1f0      	bne.n	8002138 <HAL_RCC_OscConfig+0x498>
 8002156:	e018      	b.n	800218a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d101      	bne.n	8002164 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e013      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002164:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <HAL_RCC_OscConfig+0x4f4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	429a      	cmp	r2, r3
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	429a      	cmp	r2, r3
 8002184:	d001      	beq.n	800218a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3718      	adds	r7, #24
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	40007000 	.word	0x40007000
 800219c:	42420060 	.word	0x42420060

080021a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0d0      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b4:	4b6a      	ldr	r3, [pc, #424]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d910      	bls.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c2:	4b67      	ldr	r3, [pc, #412]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 0207 	bic.w	r2, r3, #7
 80021ca:	4965      	ldr	r1, [pc, #404]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d2:	4b63      	ldr	r3, [pc, #396]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d001      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0b8      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021fc:	4b59      	ldr	r3, [pc, #356]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002202:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002206:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0308 	and.w	r3, r3, #8
 8002210:	2b00      	cmp	r3, #0
 8002212:	d005      	beq.n	8002220 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002214:	4b53      	ldr	r3, [pc, #332]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	4a52      	ldr	r2, [pc, #328]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800221e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002220:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	494d      	ldr	r1, [pc, #308]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d040      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002246:	4b47      	ldr	r3, [pc, #284]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d115      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e07f      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d107      	bne.n	800226e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800225e:	4b41      	ldr	r3, [pc, #260]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d109      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e073      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226e:	4b3d      	ldr	r3, [pc, #244]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e06b      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800227e:	4b39      	ldr	r3, [pc, #228]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f023 0203 	bic.w	r2, r3, #3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4936      	ldr	r1, [pc, #216]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002290:	f7ff fa44 	bl	800171c <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002296:	e00a      	b.n	80022ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002298:	f7ff fa40 	bl	800171c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e053      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	4b2d      	ldr	r3, [pc, #180]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 020c 	and.w	r2, r3, #12
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	429a      	cmp	r2, r3
 80022be:	d1eb      	bne.n	8002298 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c0:	4b27      	ldr	r3, [pc, #156]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d210      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022ce:	4b24      	ldr	r3, [pc, #144]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f023 0207 	bic.w	r2, r3, #7
 80022d6:	4922      	ldr	r1, [pc, #136]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	4313      	orrs	r3, r2
 80022dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022de:	4b20      	ldr	r3, [pc, #128]	; (8002360 <HAL_RCC_ClockConfig+0x1c0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e032      	b.n	8002356 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022fc:	4b19      	ldr	r3, [pc, #100]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	4916      	ldr	r1, [pc, #88]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0308 	and.w	r3, r3, #8
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	490e      	ldr	r1, [pc, #56]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 800232a:	4313      	orrs	r3, r2
 800232c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800232e:	f000 f821 	bl	8002374 <HAL_RCC_GetSysClockFreq>
 8002332:	4602      	mov	r2, r0
 8002334:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	490a      	ldr	r1, [pc, #40]	; (8002368 <HAL_RCC_ClockConfig+0x1c8>)
 8002340:	5ccb      	ldrb	r3, [r1, r3]
 8002342:	fa22 f303 	lsr.w	r3, r2, r3
 8002346:	4a09      	ldr	r2, [pc, #36]	; (800236c <HAL_RCC_ClockConfig+0x1cc>)
 8002348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_RCC_ClockConfig+0x1d0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff f9a2 	bl	8001698 <HAL_InitTick>

  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
 8002368:	08002cb8 	.word	0x08002cb8
 800236c:	20000060 	.word	0x20000060
 8002370:	20000064 	.word	0x20000064

08002374 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002374:	b490      	push	{r4, r7}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_GetSysClockFreq+0xb0>)
 800237c:	1d3c      	adds	r4, r7, #4
 800237e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002380:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002384:	f240 2301 	movw	r3, #513	; 0x201
 8002388:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	2300      	movs	r3, #0
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800239e:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d002      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x40>
 80023ae:	2b08      	cmp	r3, #8
 80023b0:	d003      	beq.n	80023ba <HAL_RCC_GetSysClockFreq+0x46>
 80023b2:	e02d      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023b4:	4b1d      	ldr	r3, [pc, #116]	; (800242c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	623b      	str	r3, [r7, #32]
      break;
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	0c9b      	lsrs	r3, r3, #18
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023c6:	4413      	add	r3, r2
 80023c8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80023cc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d013      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80023d8:	4b13      	ldr	r3, [pc, #76]	; (8002428 <HAL_RCC_GetSysClockFreq+0xb4>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	0c5b      	lsrs	r3, r3, #17
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80023e6:	4413      	add	r3, r2
 80023e8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80023ec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	4a0e      	ldr	r2, [pc, #56]	; (800242c <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f2:	fb02 f203 	mul.w	r2, r2, r3
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	e004      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002404:	fb02 f303 	mul.w	r3, r2, r3
 8002408:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	623b      	str	r3, [r7, #32]
      break;
 800240e:	e002      	b.n	8002416 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002412:	623b      	str	r3, [r7, #32]
      break;
 8002414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002416:	6a3b      	ldr	r3, [r7, #32]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bc90      	pop	{r4, r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	08002ca8 	.word	0x08002ca8
 8002428:	40021000 	.word	0x40021000
 800242c:	007a1200 	.word	0x007a1200
 8002430:	003d0900 	.word	0x003d0900

08002434 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <RCC_Delay+0x34>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	; (800246c <RCC_Delay+0x38>)
 8002442:	fba2 2303 	umull	r2, r3, r2, r3
 8002446:	0a5b      	lsrs	r3, r3, #9
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	fb02 f303 	mul.w	r3, r2, r3
 800244e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002450:	bf00      	nop
  }
  while (Delay --);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1e5a      	subs	r2, r3, #1
 8002456:	60fa      	str	r2, [r7, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1f9      	bne.n	8002450 <RCC_Delay+0x1c>
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	20000060 	.word	0x20000060
 800246c:	10624dd3 	.word	0x10624dd3

08002470 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e041      	b.n	8002506 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d106      	bne.n	800249c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7fe ff92 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2202      	movs	r2, #2
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	3304      	adds	r3, #4
 80024ac:	4619      	mov	r1, r3
 80024ae:	4610      	mov	r0, r2
 80024b0:	f000 fa6a 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2201      	movs	r2, #1
 80024c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3708      	adds	r7, #8
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
	...

08002510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d001      	beq.n	8002528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e035      	b.n	8002594 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2202      	movs	r2, #2
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a16      	ldr	r2, [pc, #88]	; (80025a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x4e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002552:	d004      	beq.n	800255e <HAL_TIM_Base_Start_IT+0x4e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a12      	ldr	r2, [pc, #72]	; (80025a4 <HAL_TIM_Base_Start_IT+0x94>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d111      	bne.n	8002582 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b06      	cmp	r3, #6
 800256e:	d010      	beq.n	8002592 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 0201 	orr.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002580:	e007      	b.n	8002592 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0201 	orr.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	40012c00 	.word	0x40012c00
 80025a4:	40000400 	.word	0x40000400

080025a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	691b      	ldr	r3, [r3, #16]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d122      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d11b      	bne.n	8002604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f06f 0202 	mvn.w	r2, #2
 80025d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f000 f9b1 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
 80025f0:	e005      	b.n	80025fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f9a4 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f000 f9b3 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b04      	cmp	r3, #4
 8002610:	d122      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b04      	cmp	r3, #4
 800261e:	d11b      	bne.n	8002658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0204 	mvn.w	r2, #4
 8002628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2202      	movs	r2, #2
 800262e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f987 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f97a 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f989 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d122      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b08      	cmp	r3, #8
 8002672:	d11b      	bne.n	80026ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0208 	mvn.w	r2, #8
 800267c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2204      	movs	r2, #4
 8002682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d003      	beq.n	800269a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f95d 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
 8002698:	e005      	b.n	80026a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f950 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f95f 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	f003 0310 	and.w	r3, r3, #16
 80026b6:	2b10      	cmp	r3, #16
 80026b8:	d122      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b10      	cmp	r3, #16
 80026c6:	d11b      	bne.n	8002700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f06f 0210 	mvn.w	r2, #16
 80026d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2208      	movs	r2, #8
 80026d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d003      	beq.n	80026ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f933 	bl	8002952 <HAL_TIM_IC_CaptureCallback>
 80026ec:	e005      	b.n	80026fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f926 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f935 	bl	8002964 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10e      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b01      	cmp	r3, #1
 800271a:	d107      	bne.n	800272c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f06f 0201 	mvn.w	r2, #1
 8002724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fd ff26 	bl	8000578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002736:	2b80      	cmp	r3, #128	; 0x80
 8002738:	d10e      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002744:	2b80      	cmp	r3, #128	; 0x80
 8002746:	d107      	bne.n	8002758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fa67 	bl	8002c26 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b40      	cmp	r3, #64	; 0x40
 8002764:	d10e      	bne.n	8002784 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d107      	bne.n	8002784 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8f9 	bl	8002976 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f003 0320 	and.w	r3, r3, #32
 800278e:	2b20      	cmp	r3, #32
 8002790:	d10e      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b20      	cmp	r3, #32
 800279e:	d107      	bne.n	80027b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f06f 0220 	mvn.w	r2, #32
 80027a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 fa32 	bl	8002c14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
 80027c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_TIM_ConfigClockSource+0x18>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e0b3      	b.n	8002938 <HAL_TIM_ConfigClockSource+0x180>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2202      	movs	r2, #2
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002808:	d03e      	beq.n	8002888 <HAL_TIM_ConfigClockSource+0xd0>
 800280a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280e:	f200 8087 	bhi.w	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002816:	f000 8085 	beq.w	8002924 <HAL_TIM_ConfigClockSource+0x16c>
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d87f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d01a      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xa2>
 8002824:	2b70      	cmp	r3, #112	; 0x70
 8002826:	d87b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d050      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x116>
 800282c:	2b60      	cmp	r3, #96	; 0x60
 800282e:	d877      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002830:	2b50      	cmp	r3, #80	; 0x50
 8002832:	d03c      	beq.n	80028ae <HAL_TIM_ConfigClockSource+0xf6>
 8002834:	2b50      	cmp	r3, #80	; 0x50
 8002836:	d873      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d058      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x136>
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d86f      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002840:	2b30      	cmp	r3, #48	; 0x30
 8002842:	d064      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x156>
 8002844:	2b30      	cmp	r3, #48	; 0x30
 8002846:	d86b      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002848:	2b20      	cmp	r3, #32
 800284a:	d060      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x156>
 800284c:	2b20      	cmp	r3, #32
 800284e:	d867      	bhi.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
 8002850:	2b00      	cmp	r3, #0
 8002852:	d05c      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x156>
 8002854:	2b10      	cmp	r3, #16
 8002856:	d05a      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002858:	e062      	b.n	8002920 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6899      	ldr	r1, [r3, #8]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	f000 f95c 	bl	8002b26 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800287c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	609a      	str	r2, [r3, #8]
      break;
 8002886:	e04e      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	6899      	ldr	r1, [r3, #8]
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f000 f945 	bl	8002b26 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028aa:	609a      	str	r2, [r3, #8]
      break;
 80028ac:	e03b      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	6859      	ldr	r1, [r3, #4]
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	461a      	mov	r2, r3
 80028bc:	f000 f8bc 	bl	8002a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2150      	movs	r1, #80	; 0x50
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 f913 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80028cc:	e02b      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8da 	bl	8002a94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2160      	movs	r1, #96	; 0x60
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f903 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 80028ec:	e01b      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f89c 	bl	8002a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2140      	movs	r1, #64	; 0x40
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f8f3 	bl	8002af2 <TIM_ITRx_SetConfig>
      break;
 800290c:	e00b      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 f8ea 	bl	8002af2 <TIM_ITRx_SetConfig>
        break;
 800291e:	e002      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002920:	bf00      	nop
 8002922:	e000      	b.n	8002926 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002924:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	bc80      	pop	{r7}
 8002950:	4770      	bx	lr

08002952 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a25      	ldr	r2, [pc, #148]	; (8002a30 <TIM_Base_SetConfig+0xa8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d007      	beq.n	80029b0 <TIM_Base_SetConfig+0x28>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d003      	beq.n	80029b0 <TIM_Base_SetConfig+0x28>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a22      	ldr	r2, [pc, #136]	; (8002a34 <TIM_Base_SetConfig+0xac>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d108      	bne.n	80029c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	68fa      	ldr	r2, [r7, #12]
 80029be:	4313      	orrs	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a1a      	ldr	r2, [pc, #104]	; (8002a30 <TIM_Base_SetConfig+0xa8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d007      	beq.n	80029da <TIM_Base_SetConfig+0x52>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d0:	d003      	beq.n	80029da <TIM_Base_SetConfig+0x52>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <TIM_Base_SetConfig+0xac>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d108      	bne.n	80029ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	689a      	ldr	r2, [r3, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a07      	ldr	r2, [pc, #28]	; (8002a30 <TIM_Base_SetConfig+0xa8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d103      	bne.n	8002a20 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	615a      	str	r2, [r3, #20]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bc80      	pop	{r7}
 8002a2e:	4770      	bx	lr
 8002a30:	40012c00 	.word	0x40012c00
 8002a34:	40000400 	.word	0x40000400

08002a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6a1b      	ldr	r3, [r3, #32]
 8002a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 030a 	bic.w	r3, r3, #10
 8002a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	621a      	str	r2, [r3, #32]
}
 8002a8a:	bf00      	nop
 8002a8c:	371c      	adds	r7, #28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bc80      	pop	{r7}
 8002a92:	4770      	bx	lr

08002a94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f023 0210 	bic.w	r2, r3, #16
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6a1b      	ldr	r3, [r3, #32]
 8002ab6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002abe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	031b      	lsls	r3, r3, #12
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ad0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	621a      	str	r2, [r3, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bc80      	pop	{r7}
 8002af0:	4770      	bx	lr

08002af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b085      	sub	sp, #20
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	f043 0307 	orr.w	r3, r3, #7
 8002b14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	609a      	str	r2, [r3, #8]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bc80      	pop	{r7}
 8002b24:	4770      	bx	lr

08002b26 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b087      	sub	sp, #28
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b40:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	021a      	lsls	r2, r3, #8
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	609a      	str	r2, [r3, #8]
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bc80      	pop	{r7}
 8002b62:	4770      	bx	lr

08002b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d101      	bne.n	8002b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	e041      	b.n	8002c00 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d004      	beq.n	8002bd4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d10c      	bne.n	8002bee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002bda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bfe:	2300      	movs	r3, #0
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400

08002c14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c1c:	bf00      	nop
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr

08002c38 <__libc_init_array>:
 8002c38:	b570      	push	{r4, r5, r6, lr}
 8002c3a:	2600      	movs	r6, #0
 8002c3c:	4d0c      	ldr	r5, [pc, #48]	; (8002c70 <__libc_init_array+0x38>)
 8002c3e:	4c0d      	ldr	r4, [pc, #52]	; (8002c74 <__libc_init_array+0x3c>)
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	42a6      	cmp	r6, r4
 8002c46:	d109      	bne.n	8002c5c <__libc_init_array+0x24>
 8002c48:	f000 f822 	bl	8002c90 <_init>
 8002c4c:	2600      	movs	r6, #0
 8002c4e:	4d0a      	ldr	r5, [pc, #40]	; (8002c78 <__libc_init_array+0x40>)
 8002c50:	4c0a      	ldr	r4, [pc, #40]	; (8002c7c <__libc_init_array+0x44>)
 8002c52:	1b64      	subs	r4, r4, r5
 8002c54:	10a4      	asrs	r4, r4, #2
 8002c56:	42a6      	cmp	r6, r4
 8002c58:	d105      	bne.n	8002c66 <__libc_init_array+0x2e>
 8002c5a:	bd70      	pop	{r4, r5, r6, pc}
 8002c5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c60:	4798      	blx	r3
 8002c62:	3601      	adds	r6, #1
 8002c64:	e7ee      	b.n	8002c44 <__libc_init_array+0xc>
 8002c66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c6a:	4798      	blx	r3
 8002c6c:	3601      	adds	r6, #1
 8002c6e:	e7f2      	b.n	8002c56 <__libc_init_array+0x1e>
 8002c70:	08002cc8 	.word	0x08002cc8
 8002c74:	08002cc8 	.word	0x08002cc8
 8002c78:	08002cc8 	.word	0x08002cc8
 8002c7c:	08002ccc 	.word	0x08002ccc

08002c80 <memset>:
 8002c80:	4603      	mov	r3, r0
 8002c82:	4402      	add	r2, r0
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d100      	bne.n	8002c8a <memset+0xa>
 8002c88:	4770      	bx	lr
 8002c8a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c8e:	e7f9      	b.n	8002c84 <memset+0x4>

08002c90 <_init>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr

08002c9c <_fini>:
 8002c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c9e:	bf00      	nop
 8002ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ca2:	bc08      	pop	{r3}
 8002ca4:	469e      	mov	lr, r3
 8002ca6:	4770      	bx	lr
